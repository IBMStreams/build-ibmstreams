<?xml version="1.0" encoding="UTF-8" standalone="no" ?>
<toolkitModel xmlns="http://www.ibm.com/xmlns/prod/streams/spl/toolkit" productVersion="4.3.0.3" xmlns:common="http://www.ibm.com/xmlns/prod/streams/spl/common" xmlns:ti="http://www.ibm.com/xmlns/prod/streams/spl/toolkitInfo" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">

  <toolkit name="com.ibm.streamsx.inet2" requiredProductVersion="4.0.1.0" version="2.9.6">
    <description>
The Internet Toolkit provides support for common internet protocols.

This toolkit separates its functionality into a number of namespaces:
* [namespace:com.ibm.streamsx.inet|com.ibm.streamsx.inet]: General purpose internet operator supporting a number of protocols.
* [namespace:com.ibm.streamsx.inet.ftp|com.ibm.streamsx.inet.ftp]: Operators that interact with external FTP servers.
* [namespace:com.ibm.streamsx.inet.http|com.ibm.streamsx.inet.http]: Operators that interact with external HTTP servers.
* [namespace:com.ibm.streamsx.inet.rest|com.ibm.streamsx.inet.rest]: Operators that embed a HTTP server to provide a REST-style API to streaming data.
* [namespace:com.ibm.streamsx.inet.wsserver|com.ibm.streamsx.inet.wsserver]: Operators that embed a WebSocket server to expose streaming data as WebSocket messages.

    </description>
    <uriTable>
      <uri index="32" value="com.ibm.streamsx.inet.rest/HTTPXMLView"/>
      <uri index="9" value="com.ibm.streamsx.inet.wsserver/WebSocketInject/WebSocketInject_32.gif"/>
      <uri index="26" value="com.ibm.streamsx.inet.rest/HTTPTupleView"/>
      <uri index="5" value="com.ibm.streamsx.inet.rest/map.spl"/>
      <uri index="53" value="com.ibm.streamsx.inet.http/HTTPPost/HTTPPost_16.gif"/>
      <uri index="63" value="com.ibm.streamsx.inet.ftp/FTPPutFile/ftpPutFile_32.gif"/>
      <uri index="16" value="com.ibm.streamsx.inet.rest/HTTPBLOBInjection/HTTPBLOBInjection_32.gif"/>
      <uri index="29" value="com.ibm.streamsx.inet.rest/HTTPXMLInjection"/>
      <uri index="8" value="com.ibm.streamsx.inet.wsserver/WebSocketInject/WebSocketInject_16.gif"/>
      <uri index="15" value="com.ibm.streamsx.inet.rest/HTTPBLOBInjection/HTTPBLOBInjection_16.gif"/>
      <uri index="30" value="com.ibm.streamsx.inet.rest/HTTPXMLInjection/HTTPXMLInjection_16.gif"/>
      <uri index="13" value="com.ibm.streamsx.inet.rest/native.function/javaFunction.xml"/>
      <uri index="48" value="com.ibm.streamsx.inet.http/HTTPGetStream/HTTPGetStream_32.gif"/>
      <uri index="3" value="com.ibm.streamsx.inet.http/HTTPTypes.spl"/>
      <uri index="2" value="com.ibm.streamsx.inet.http/HTTPParallelRequest.spl"/>
      <uri index="57" value="com.ibm.streamsx.inet.http/HTTPRequest/HTTPPost_32.gif"/>
      <uri index="31" value="com.ibm.streamsx.inet.rest/HTTPXMLInjection/HTTPXMLInjection_32.gif"/>
      <uri index="12" value="com.ibm.streamsx.inet.wsserver/WebSocketSend/WebSocketSend_32.gif"/>
      <uri index="7" value="com.ibm.streamsx.inet.wsserver/WebSocketInject"/>
      <uri index="64" value="com.ibm.streamsx.inet.ftp/FTPReader"/>
      <uri index="58" value="com.ibm.streamsx.inet.ftp/FTPCommand"/>
      <uri index="28" value="com.ibm.streamsx.inet.rest/HTTPTupleView/HTTPTupleView_32.gif"/>
      <uri index="45" value="com.ibm.streamsx.inet.http/HTTPGetJSONContent/HTTPGetXMLContent_32.gif"/>
      <uri index="38" value="com.ibm.streamsx.inet/native.function/function.xml"/>
      <uri index="46" value="com.ibm.streamsx.inet.http/HTTPGetStream"/>
      <uri index="41" value="com.ibm.streamsx.inet/InetSource/InetSource_32.gif"/>
      <uri index="19" value="com.ibm.streamsx.inet.rest/HTTPJSONInjection/HTTPTupleInjection_32.gif"/>
      <uri index="1" value="com.ibm.streamsx.inet.ftp/Definitions.spl"/>
      <uri index="6" value="com.ibm.streamsx.inet.rest/namespace-info.spl"/>
      <uri index="60" value="com.ibm.streamsx.inet.ftp/FTPCommand/ftpCommand_32.gif"/>
      <uri index="55" value="com.ibm.streamsx.inet.http/HTTPRequest"/>
      <uri index="18" value="com.ibm.streamsx.inet.rest/HTTPJSONInjection/HTTPTupleInjection_16.gif"/>
      <uri index="40" value="com.ibm.streamsx.inet/InetSource/InetSource_16.gif"/>
      <uri index="62" value="com.ibm.streamsx.inet.ftp/FTPPutFile/ftpPutFile_16.gif"/>
      <uri index="50" value="com.ibm.streamsx.inet.http/HTTPGetXMLContent/HTTPGetXMLContent_16.gif"/>
      <uri index="20" value="com.ibm.streamsx.inet.rest/HTTPRequestProcess"/>
      <uri index="33" value="com.ibm.streamsx.inet.rest/HTTPXMLView/HTTPXMLView_16.gif"/>
      <uri index="21" value="com.ibm.streamsx.inet.rest/HTTPRequestProcess/HTTPTupleRequest_16.jpeg"/>
      <uri index="61" value="com.ibm.streamsx.inet.ftp/FTPPutFile"/>
      <uri index="51" value="com.ibm.streamsx.inet.http/HTTPGetXMLContent/HTTPGetXMLContent_32.gif"/>
      <uri index="4" value="com.ibm.streamsx.inet.rest/HTTPRestTypes.spl"/>
      <uri index="23" value="com.ibm.streamsx.inet.rest/HTTPTupleInjection"/>
      <uri index="11" value="com.ibm.streamsx.inet.wsserver/WebSocketSend/WebSocketSend_16.gif"/>
      <uri index="42" value="com.ibm.streamsx.inet.http/native.function/function.xml"/>
      <uri index="66" value="com.ibm.streamsx.inet.ftp/FTPReader/ftpReader_32.gif"/>
      <uri index="24" value="com.ibm.streamsx.inet.rest/HTTPTupleInjection/HTTPTupleInjection_16.gif"/>
      <uri index="10" value="com.ibm.streamsx.inet.wsserver/WebSocketSend"/>
      <uri index="35" value="com.ibm.streamsx.inet.rest/WebContext"/>
      <uri index="43" value="com.ibm.streamsx.inet.http/HTTPGetJSONContent"/>
      <uri index="65" value="com.ibm.streamsx.inet.ftp/FTPReader/ftpReader_16.gif"/>
      <uri index="36" value="com.ibm.streamsx.inet.rest/WebContext/WebContext_16.gif"/>
      <uri index="17" value="com.ibm.streamsx.inet.rest/HTTPJSONInjection"/>
      <uri index="52" value="com.ibm.streamsx.inet.http/HTTPPost"/>
      <uri index="14" value="com.ibm.streamsx.inet.rest/HTTPBLOBInjection"/>
      <uri index="44" value="com.ibm.streamsx.inet.http/HTTPGetJSONContent/HTTPGetXMLContent_16.gif"/>
      <uri index="59" value="com.ibm.streamsx.inet.ftp/FTPCommand/ftpCommand_16.gif"/>
      <uri index="47" value="com.ibm.streamsx.inet.http/HTTPGetStream/HTTPGetStream_16.gif"/>
      <uri index="49" value="com.ibm.streamsx.inet.http/HTTPGetXMLContent"/>
      <uri index="34" value="com.ibm.streamsx.inet.rest/HTTPXMLView/HTTPXMLView_32.gif"/>
      <uri index="27" value="com.ibm.streamsx.inet.rest/HTTPTupleView/HTTPTupleView_16.gif"/>
      <uri index="25" value="com.ibm.streamsx.inet.rest/HTTPTupleInjection/HTTPTupleInjection_32.gif"/>
      <uri index="39" value="com.ibm.streamsx.inet/InetSource"/>
      <uri index="37" value="com.ibm.streamsx.inet.rest/WebContext/WebContext_32.gif"/>
      <uri index="54" value="com.ibm.streamsx.inet.http/HTTPPost/HTTPPost_32.gif"/>
      <uri index="22" value="com.ibm.streamsx.inet.rest/HTTPRequestProcess/HTTPTupleRequest_32.jpeg"/>
      <uri index="56" value="com.ibm.streamsx.inet.http/HTTPRequest/HTTPPost_16.gif"/>
    </uriTable>
    <namespace name="com.ibm.streamsx.inet.wsserver">
      <primitiveOp language="Java" modelUriIndex="7" name="WebSocketInject" public="true">
        <description> Operator recieves messages from WebSocket clients and generates a tuple which is sent to streams.  Each received message is output as tuple. The data received is dependent upon the input ports schema.</description>
        <images>
          <image size="16" uriIndex="8"/>
          <image size="32" uriIndex="9"/>
        </images>
        <parameter expressionMode="Constant" name="vmArg" optional="true" type="rstring">
          <description>
Specifies command-line arguments that are passed to the Java virtual machine that the operator runs within.
</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="ackCount" optional="true" type="int32">
          <description>The operator sends out an ack message to all currently connected clients.  An ack message is sent when the (totaslNumberOfMessagesRecieved % ackCount) == 0, The ack message is a in JSON format \{ status:'COUNT', text:&lt;totalNumberOfMessagesReceived&gt;\}. Default value is 0, no ack messages will be sent.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="initDelay" optional="true" type="int64">
          <description>Delay in seconds before the operator starts producing tuples.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="messageAttribute" optional="true" type="rstring">
          <description>Input port's attribute that the data received will be stored to. If the port has more than one attribute this parameter is required. </description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="port" optional="false" type="int32">
          <description>WebSocket network port that messages arrive on. The WebSocket client(s) use this port to transmit on.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="senderIdAttribute" optional="true" type="rstring">
          <description>Input port attribute that will we loaded with the message sender's identifier, this identifier is consistent during the lifetime of the sender's session.</description>
        </parameter>
        <outputPort expressionMode="Nonexistent" maxNumPorts="1" minNumPorts="1" optional="false" windowPunctOutputMode="Free">
          <description>First attribute will have the message received via the WebSocket, of type rstring. Second attribute (if provided) will have the senders unique id, or type rstring.Subsequent attribute(s) are allowed and will not be poplulated.</description>
        </outputPort>
      </primitiveOp>
      <primitiveOp language="Java" modelUriIndex="10" name="WebSocketSend" public="true">
        <description>Operator transmits tuples recieved on the input port via WebSocket protocol to connected clients.Upon startup, starts WebSocket Server. As tuple arrives on the input port they're converted intoJSON formatted messages and transmitted to all currently connected clients. Clients can connect and disconnect at anytime.</description>
        <images>
          <image size="16" uriIndex="11"/>
          <image size="32" uriIndex="12"/>
        </images>
        <parameter expressionMode="Constant" name="vmArg" optional="true" type="rstring">
          <description>
Specifies command-line arguments that are passed to the Java virtual machine that the operator runs within.
</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="batchSize" optional="true" type="int32">
          <description>Set the batch size.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="port" optional="false" type="int32">
          <description>Port that clients connect to and tuples formatted as JSON message are transmitted over.</description>
        </parameter>
        <inputPort maxNumPorts="1" minNumPorts="1" optional="false" windowPunctInputMode="Oblivious">
          <description>Port that clients connect to and tuples formatted as JSON message are transmitted over.</description>
          <windowPolicy>NonWindowed</windowPolicy>
        </inputPort>
      </primitiveOp>
    </namespace>
    <namespace name="com.ibm.streamsx.inet.rest">
      <primitiveOp language="Java" modelUriIndex="14" name="HTTPBLOBInjection" public="true">
        <description>Embeds a Jetty web server to allow HTTP or HTTPS POST requests to submit a tuple on its output ports. Each output port corresponds to a unique URL comprising the operator name and the port index.

A single tuple is generated for an incoming POST request. The first attribute, which must be of SPL type `blob` in the output port's schema corresponds to the contents of the POST requiring content-type `application/octet-stream`. Any other attributes will be set to their default value.

The URLs defined by this operator are:
* *prefix*`/ports/output/`*port index*`/inject` - Accepts POST requests of type `application/octet-stream`.
* *prefix*`/ports/output/`*port index*`/info` - Output port meta-data including the stream attribute names and types (content type `application/json`).

The *prefix* for the URLs is:
* *context path*`/`*base operator name* - When the `context` parameter is set.
* *full operator name* - When the `context` parameter is **not** set.

**Limitations**:
* Error handling is limited, incorrect URLs can crash the application.
* By default no security access is provided to the data, HTTPS must be explicitly configured.</description>
        <images>
          <image size="16" uriIndex="15"/>
          <image size="32" uriIndex="16"/>
        </images>
        <parameter expressionMode="Constant" name="vmArg" optional="true" type="rstring">
          <description>
Specifies command-line arguments that are passed to the Java virtual machine that the operator runs within.
</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="certificateAlias" optional="true" type="rstring">
          <description>Alias of the certificate to use in the key store. When this parameter is set all connections use HTTPS.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="context" optional="true" type="rstring">
          <description>Define a URL context path that maps to the resources defined by`contextResourceBase`. This allows a composite that invokes this operator in a toolkit to provide resources regardless of the value of the application's data directory. For example setting it to *maps* would result in the URL */maps/index.html* mapping to the file *index.html* in the directory defined by `contextResourceBase`. Requires the parameter `contextResourceBase` to be set. If when the operator is initialized the context already exists then no action is taken. This allows multiple independent composites in the same toolkit to have common `context` and `contextResourceBase` settings, typically to point to a single set of HTML and Javascript resources for the toolkit.

If the operator provides URLs for its input or output ports then they are placed in the this context when this parameter is set. This then provides fixed locations for the URLs regardless of the depth of the operator invocation in the main composite.

Only a single context per invocation is supported.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="contextResourceBase" optional="true" type="rstring">
          <description>Directory location of resources that will be available through the the URL context defined by the parameter `context`. Typically used to allow a toolkit to provide a set of resources in a fixed location. The set of resources is recommended to be stored in the application_dir/opt directory, which is automatically included in the bundle by default. Path of this directory can be absolute or relative, if relative path is specified then it is relative to the application directory. A set of default resources is included in the toolkit directory under ToolkitDir/opt/resources and will be loaded by the operator. This default resources can be viewed at `http://hostname:8080/streamsx.inet.resources`. A path within the application is obtained using the SPL function `getThisToolkitDir()`. Thus a composite in the file *maps.spl* in the namespace directory `com.acme.streams.apps.map` might have the following setting to map `http://127.0.0.1:8080/maps` to `opt/resources/mapinfo` in the application.

    param
      context: “maps”
      contextResourceBase: getThisToolkitDir() + “/opt/resources/mapinfo”
</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="keyPassword" optional="true" type="rstring">
          <description>Password to the certificate. If not provided, defaults to the value of `keyStorePassword`.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="keyStore" optional="true" type="rstring">
          <description>URL to the key store containing the certificate. If a relative file path then it is taken as relative to the application directory.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="keyStorePassword" optional="true" type="rstring">
          <description>Password to the key store.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="port" optional="true" type="int32">
          <description>Port number for the embedded Jetty HTTP server. Defaults to 8080.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="trustStore" optional="true" type="rstring">
          <description>URL to the trust store containing client certificates. If a relative file path then it is taken as relative to the application directory. When this parameter is set, client authentication is required.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="trustStorePassword" optional="true" type="rstring">
          <description>Password to the trust store.</description>
        </parameter>
        <outputPort expressionMode="Nonexistent" maxNumPorts="1" minNumPorts="1" optional="false" windowPunctOutputMode="Free">
          <description>Emits a tuple for each POST request on the inject URL with port index 0</description>
        </outputPort>
        <outputPort expressionMode="Nonexistent" minNumPorts="0" optional="true" windowPunctOutputMode="Free">
          <description>Optional additional ports that emit a tuple for each POST request on the inject URL with the corresponding port index</description>
        </outputPort>
      </primitiveOp>
      <primitiveOp language="Java" modelUriIndex="17" name="HTTPJSONInjection" public="true">
        <description>Embeds a Jetty web server to allow HTTP or HTTPS POST requests with mime type `application/json` to submit a tuple on its output ports. Each output port corresponds to a unique URL comprising the operator name and the port index.

A single tuple is generated for an incoming POST request. The incoming JSON value is assigned to the `rstring jsonString` attribute if it exists,otherwise to the first attribute, which must be of SPL type `rstring` in the output port's schema corresponds to the contents of the POST requiring content-type `application/json`. Any other attributes will be set to their default value.

The URLs defined by this operator are:
* *prefix*`/ports/output/`*port index*`/inject` - Accepts POST requests of type `application/xml`.
* *prefix*`/ports/output/`*port index*`/info` - Output port meta-data including the stream attribute names and types (content type `application/json`).

The *prefix* for the URLs is:
* *context path*`/`*base operator name* - When the `context` parameter is set.
* *full operator name* - When the `context` parameter is **not** set.

**Limitations**:
* Error handling is limited, incorrect URLs can crash the application.
* By default no security access is provided to the data, HTTPS must be explicitly configured.</description>
        <images>
          <image size="16" uriIndex="18"/>
          <image size="32" uriIndex="19"/>
        </images>
        <parameter expressionMode="Constant" name="vmArg" optional="true" type="rstring">
          <description>
Specifies command-line arguments that are passed to the Java virtual machine that the operator runs within.
</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="certificateAlias" optional="true" type="rstring">
          <description>Alias of the certificate to use in the key store. When this parameter is set all connections use HTTPS.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="context" optional="true" type="rstring">
          <description>Define a URL context path that maps to the resources defined by`contextResourceBase`. This allows a composite that invokes this operator in a toolkit to provide resources regardless of the value of the application's data directory. For example setting it to *maps* would result in the URL */maps/index.html* mapping to the file *index.html* in the directory defined by `contextResourceBase`. Requires the parameter `contextResourceBase` to be set. If when the operator is initialized the context already exists then no action is taken. This allows multiple independent composites in the same toolkit to have common `context` and `contextResourceBase` settings, typically to point to a single set of HTML and Javascript resources for the toolkit.

If the operator provides URLs for its input or output ports then they are placed in the this context when this parameter is set. This then provides fixed locations for the URLs regardless of the depth of the operator invocation in the main composite.

Only a single context per invocation is supported.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="contextResourceBase" optional="true" type="rstring">
          <description>Directory location of resources that will be available through the the URL context defined by the parameter `context`. Typically used to allow a toolkit to provide a set of resources in a fixed location. The set of resources is recommended to be stored in the application_dir/opt directory, which is automatically included in the bundle by default. Path of this directory can be absolute or relative, if relative path is specified then it is relative to the application directory. A set of default resources is included in the toolkit directory under ToolkitDir/opt/resources and will be loaded by the operator. This default resources can be viewed at `http://hostname:8080/streamsx.inet.resources`. A path within the application is obtained using the SPL function `getThisToolkitDir()`. Thus a composite in the file *maps.spl* in the namespace directory `com.acme.streams.apps.map` might have the following setting to map `http://127.0.0.1:8080/maps` to `opt/resources/mapinfo` in the application.

    param
      context: “maps”
      contextResourceBase: getThisToolkitDir() + “/opt/resources/mapinfo”
</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="keyPassword" optional="true" type="rstring">
          <description>Password to the certificate. If not provided, defaults to the value of `keyStorePassword`.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="keyStore" optional="true" type="rstring">
          <description>URL to the key store containing the certificate. If a relative file path then it is taken as relative to the application directory.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="keyStorePassword" optional="true" type="rstring">
          <description>Password to the key store.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="port" optional="true" type="int32">
          <description>Port number for the embedded Jetty HTTP server. Defaults to 8080.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="trustStore" optional="true" type="rstring">
          <description>URL to the trust store containing client certificates. If a relative file path then it is taken as relative to the application directory. When this parameter is set, client authentication is required.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="trustStorePassword" optional="true" type="rstring">
          <description>Password to the trust store.</description>
        </parameter>
        <outputPort expressionMode="Nonexistent" maxNumPorts="1" minNumPorts="1" optional="false" windowPunctOutputMode="Free">
          <description>Emits a tuple for each POST request on the inject URL with port index 0</description>
        </outputPort>
        <outputPort expressionMode="Nonexistent" minNumPorts="0" optional="true" windowPunctOutputMode="Free">
          <description>Optional additional ports that emit a tuple for each POST request on the inject URL with the corresponding port index</description>
        </outputPort>
      </primitiveOp>
      <primitiveOp language="Java" modelUriIndex="20" name="HTTPRequestProcess" public="true">
        <description>Operator accepts a web request and generates corresponding response.  The request is injected into streams on the output port, the input port receives the response.This enables a developer to process HTTP form's and REST calls. The request arrives on the output port, results are presented on the input port.The request is coorolated to the response with an attribute 'key' that arrives with the request parameters' on the output port and must accompany the response on the input port.

The URLs defined by this operator are:
* *prefix*`/ports/analyze/`*port index*`/` - Injects a tuple into the output and the response is taken from the matching tuple on the input port.
* *prefix*`/ports/input/`*port index*`/info` - Output port meta-data including the stream attribute names and types (content type `application/json`).

The *prefix* for the URLs is:
* *context path*`/`*base operator name* - When the `context` parameter is set.
* *full operator name* - When the `context` parameter is **not** set.

For the `analyze` path any HTTP method can be used and any sub-path. For example with a context of `api` and operator name of `Bus` then `api/Bus/ports/analyze/0/get_location` is valid.

Input and output ports have two possible formats: tuple and json. With tuple format, each web input fields is mapped to an attribute. Json format has one attribute ('jsonString'), each web field is mapped to a json object field.

The jsonString object will be populated with all the fields. The default attribute names can beoverridden for tuple.

The operator handles two flavors of http requests, forms and REST. In the case of forms, webpages can be served up from the contextResourceBase, this can be to static html or template. . Refer to the spl example for a form processed by the operator using a template to format the response.

 For the input port (the web response), only the 'key' is mandatory for both json and tuple. The following lists the default values if the field or attribute is not provided.
* rstring response : 0 length response.
* int32 statusCode : 200 (OK)
* rstring statusMessage :  not set
* rstring contentType : 'text/html; charset=utf-8'.
* Map&lt;rstring,rstring&gt; headers : No headers provided


 # Notes:

 * The 'key' attribute on the output and input port's are correlated. Losing the correlation loses the request.
 * If the input port's response key cannot be located the web request will timeout, metrics will be incremented.
 * If the input jsonString value cannot be converted to an jsonObject, no response will be generated and web request will timeout.
 * Only the first input port's key will produce a web response.
 * The 'jsonString' attribute json field names are the default attribute names.
 * context/pathInfo relationship : A request's context path beyond the base is accepted, the 'pathInfo' attribute will have path beyond the base.    If the context path is */work* requests to */work/translate* will have a 'pathInfo' of */translate* and requests   to */work/translate/speakeasy* will have a 'pathInfo' of */translate/speakeasy*.

</description>
        <images>
          <image size="16" uriIndex="21"/>
          <image size="32" uriIndex="22"/>
        </images>
        <parameter expressionMode="Constant" name="vmArg" optional="true" type="rstring">
          <description>
Specifies command-line arguments that are passed to the Java virtual machine that the operator runs within.
</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="certificateAlias" optional="true" type="rstring">
          <description>Alias of the certificate to use in the key store. When this parameter is set all connections use HTTPS.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="contentTypeAttributeName" optional="true" type="rstring">
          <description>Output port's attribute with content-type will be provided in, default: "contentType".  </description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="context" optional="true" type="rstring">
          <description>Define a URL context path that maps to the resources defined by`contextResourceBase`. This allows a composite that invokes this operator in a toolkit to provide resources regardless of the value of the application's data directory. For example setting it to *maps* would result in the URL */maps/index.html* mapping to the file *index.html* in the directory defined by `contextResourceBase`. Requires the parameter `contextResourceBase` to be set. If when the operator is initialized the context already exists then no action is taken. This allows multiple independent composites in the same toolkit to have common `context` and `contextResourceBase` settings, typically to point to a single set of HTML and Javascript resources for the toolkit.

If the operator provides URLs for its input or output ports then they are placed in the this context when this parameter is set. This then provides fixed locations for the URLs regardless of the depth of the operator invocation in the main composite.

Only a single context per invocation is supported.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="contextResourceBase" optional="true" type="rstring">
          <description>Directory location of resources that will be available through the the URL context defined by the parameter `context`. Typically used to allow a toolkit to provide a set of resources in a fixed location. The set of resources is recommended to be stored in the application_dir/opt directory, which is automatically included in the bundle by default. Path of this directory can be absolute or relative, if relative path is specified then it is relative to the application directory. A set of default resources is included in the toolkit directory under ToolkitDir/opt/resources and will be loaded by the operator. This default resources can be viewed at `http://hostname:8080/streamsx.inet.resources`. A path within the application is obtained using the SPL function `getThisToolkitDir()`. Thus a composite in the file *maps.spl* in the namespace directory `com.acme.streams.apps.map` might have the following setting to map `http://127.0.0.1:8080/maps` to `opt/resources/mapinfo` in the application.

    param
      context: “maps”
      contextResourceBase: getThisToolkitDir() + “/opt/resources/mapinfo”
</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="headerAttributeName" optional="true" type="rstring">
          <description>Output port's web request headers, in the form of a objects&lt;name, value&gt;, default: "header".  </description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="keyAttributeName" optional="true" type="rstring">
          <description> Input and output port's corrolation key. The values is expected to be unchanged between the input and output, default: "key". </description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="keyPassword" optional="true" type="rstring">
          <description>Password to the certificate. If not provided, defaults to the value of `keyStorePassword`.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="keyStore" optional="true" type="rstring">
          <description>URL to the key store containing the certificate. If a relative file path then it is taken as relative to the application directory.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="keyStorePassword" optional="true" type="rstring">
          <description>Password to the key store.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="methodAttributeName" optional="true" type="rstring">
          <description>Output ports's attribute name with the request method (PUT, GET, POST), default: "method".  </description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="pathInfoAttributeName" optional="true" type="rstring">
          <description>Output ports's attribute of the content path below the base, default "pathInfo".  </description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="port" optional="true" type="int32">
          <description>Port number for the embedded Jetty HTTP server. Defaults to 8080.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="requestAttributeName" optional="true" type="rstring">
          <description>Output port's attribute name with the web request (body of the web request), default "request".  </description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="responseAttributeName" optional="true" type="rstring">
          <description>Input port's attribute response (body of the web response), default:  "response".  </description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="responseContentTypeAttributeName" optional="true" type="rstring">
          <description>Input port's web response content type, default: "contentType".  </description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="responseHeaderAttributeName" optional="true" type="rstring">
          <description>Input port's web response header objects&lt;name,value&gt;, default: "header".  </description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="responseJsonAttributeName" optional="true" type="rstring">
          <description>Input port's json results (complete response), default:  "jsonString".  </description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="statusAttributeName" optional="true" type="rstring">
          <description>Input port's attribute web status, default:  "status".  </description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="statusMessageAttributeName" optional="true" type="rstring">
          <description>Input port's web status message response, when the 'status' value is &gt;= 400 (SC_BAD_REQUEST), default:  "statusMessage".  </description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="trustStore" optional="true" type="rstring">
          <description>URL to the trust store containing client certificates. If a relative file path then it is taken as relative to the application directory. When this parameter is set, client authentication is required.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="trustStorePassword" optional="true" type="rstring">
          <description>Password to the trust store.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="webTimeout" optional="true" type="float64">
          <description>Number of seconds to wait for the web request to be processed by Streams, default: "15.0".  </description>
        </parameter>
        <inputPort maxNumPorts="1" minNumPorts="1" optional="false" windowPunctInputMode="Oblivious">
          <description>Response to be returned to the web requestor.</description>
          <windowPolicy>NonWindowed</windowPolicy>
        </inputPort>
        <outputPort expressionMode="Nonexistent" maxNumPorts="1" minNumPorts="1" optional="false" windowPunctOutputMode="Generating">
          <description>Request from web to process.</description>
        </outputPort>
      </primitiveOp>
      <primitiveOp language="Java" modelUriIndex="23" name="HTTPTupleInjection" public="true">
        <description>Embeds a Jetty web server to allow HTTP or HTTPS POST requests to submit a tuple on its output ports. Each output port corresponds to a unique URL comprising the operator name and the port index.

A single tuple is generated for an incoming POST request. Each attribute in the output port's schema corresponds to a parameter in the POST with the attribute name, using `application/x-www-form-urlencoded`. If the parameter exists in the POST then its first value is assigned to the output tuple, if the value is not provided then the attribute will be set to its default value.

In addition to the URL for POST request, a URL is created that displays an automatically generated HTML form that can be displayed by a browser and used for manual injection of tuples.

The URLs defined by this operator are:
* *prefix*`/ports/output/`*port index*`/inject` - Accepts POST requests of type `application/x-www-form-urlencoded`.
* *prefix*`/ports/output/`*port index*`/form` - HTML web form that can be used to test tuple submission.
* *prefix*`/ports/output/`*port index*`/info` - Output port meta-data including the stream attribute names and types (content type `application/json`).

The *prefix* for the URLs is:
* *context path*`/`*base operator name* - When the `context` parameter is set.
* *full operator name* - When the `context` parameter is **not** set.

**Maximum Content Size**:
Jetty limits the amount of data that can post back from a browser or other client to this operator. This helps protect the operator against denial of service attacks by malicious clients sending huge amounts of data. The default limit is 200K bytes, a client will receive an HTTP 500 error response code if it tries to POST too much data. The limit may be increased using the `maxContentSize` parameter.

**Limitations**:
* Error handling is limited, incorrect URLs can crash the application.
* Not all SPL data types are supported. String, signed integer and float types are supported for POST parameters. Output port may contain other types but will be set
to their default values.
* By default no security access is provided to the data, HTTPS must be explicitly configured.</description>
        <images>
          <image size="16" uriIndex="24"/>
          <image size="32" uriIndex="25"/>
        </images>
        <parameter expressionMode="Constant" name="vmArg" optional="true" type="rstring">
          <description>
Specifies command-line arguments that are passed to the Java virtual machine that the operator runs within.
</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="certificateAlias" optional="true" type="rstring">
          <description>Alias of the certificate to use in the key store. When this parameter is set all connections use HTTPS.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="context" optional="true" type="rstring">
          <description>Define a URL context path that maps to the resources defined by`contextResourceBase`. This allows a composite that invokes this operator in a toolkit to provide resources regardless of the value of the application's data directory. For example setting it to *maps* would result in the URL */maps/index.html* mapping to the file *index.html* in the directory defined by `contextResourceBase`. Requires the parameter `contextResourceBase` to be set. If when the operator is initialized the context already exists then no action is taken. This allows multiple independent composites in the same toolkit to have common `context` and `contextResourceBase` settings, typically to point to a single set of HTML and Javascript resources for the toolkit.

If the operator provides URLs for its input or output ports then they are placed in the this context when this parameter is set. This then provides fixed locations for the URLs regardless of the depth of the operator invocation in the main composite.

Only a single context per invocation is supported.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="contextResourceBase" optional="true" type="rstring">
          <description>Directory location of resources that will be available through the the URL context defined by the parameter `context`. Typically used to allow a toolkit to provide a set of resources in a fixed location. The set of resources is recommended to be stored in the application_dir/opt directory, which is automatically included in the bundle by default. Path of this directory can be absolute or relative, if relative path is specified then it is relative to the application directory. A set of default resources is included in the toolkit directory under ToolkitDir/opt/resources and will be loaded by the operator. This default resources can be viewed at `http://hostname:8080/streamsx.inet.resources`. A path within the application is obtained using the SPL function `getThisToolkitDir()`. Thus a composite in the file *maps.spl* in the namespace directory `com.acme.streams.apps.map` might have the following setting to map `http://127.0.0.1:8080/maps` to `opt/resources/mapinfo` in the application.

    param
      context: “maps”
      contextResourceBase: getThisToolkitDir() + “/opt/resources/mapinfo”
</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="keyPassword" optional="true" type="rstring">
          <description>Password to the certificate. If not provided, defaults to the value of `keyStorePassword`.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="keyStore" optional="true" type="rstring">
          <description>URL to the key store containing the certificate. If a relative file path then it is taken as relative to the application directory.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="keyStorePassword" optional="true" type="rstring">
          <description>Password to the key store.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="maxContentSize" optional="true" type="int32">
          <description>Change the maximum HTTP POST content size (K bytes) allowed by this operator.Jetty limits the amount of data that can posted from a browser or other client to the operator. This helps protect the operator against denial of service attacks by malicious clients sending huge amounts of data. The default maximum size Jetty permits is 200K bytes, thus the default value for this parameter is 200. For example, to increase to 500,000 bytes set maxContentSize to 500.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="port" optional="true" type="int32">
          <description>Port number for the embedded Jetty HTTP server. Defaults to 8080.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="trustStore" optional="true" type="rstring">
          <description>URL to the trust store containing client certificates. If a relative file path then it is taken as relative to the application directory. When this parameter is set, client authentication is required.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="trustStorePassword" optional="true" type="rstring">
          <description>Password to the trust store.</description>
        </parameter>
        <outputPort expressionMode="Nonexistent" maxNumPorts="1" minNumPorts="1" optional="false" windowPunctOutputMode="Free">
          <description>Emits a tuple for each POST request on the inject URL with port index 0</description>
        </outputPort>
        <outputPort expressionMode="Nonexistent" minNumPorts="0" optional="true" windowPunctOutputMode="Free">
          <description>Optional additional ports that emit a tuple for each POST request on the inject URL with the corresponding port index</description>
        </outputPort>
      </primitiveOp>
      <primitiveOp language="Java" modelUriIndex="26" name="HTTPTupleView" public="true">
        <description>REST HTTP or HTTPS API to view tuples from windowed input ports.
Embeds a Jetty web server to provide HTTP REST access to the collection of tuples in the input port window at the time of the last eviction for tumbling windows, or last trigger for sliding windows.
The URLs defined by this operator are:
* *prefix*`/ports/input/`*port index*`/tuples` - Returns the set of tuples as a array of the tuples in JSON format (content type `application/json`).
* *prefix*`/ports/input/`*port index*`/info` - Output port meta-data including the stream attribute names and types (content type `application/json`).

The *prefix* for the URLs is:
* *context path*`/`*base operator name* - When the `context` parameter is set.
* *full operator name* - When the `context` parameter is **not** set.

The `/tuples` URL accepts these optional query parameters:
* `partition` – When the window is partitioned defines the partition to be extracted from the window. When partitionKey contains multiple attributes, partition must contain the same number of values as attributes and in the same order, e.g. `?partition=John&amp;partition=Smith`. would match the SPL partitionKey setting of: `partitionKey: “firstName”, “lastName”;`. When a window is partitioned and no partition query parameter is provided the data for all partitions is returned.
* `attribute` – Restricts the returned data to the named attributes. Data is returned in the order the attribute names are provided. When not provided, all attributes in the input tuples are returned. E.g. `?format=json&amp;attribute=lastName&amp;attribute=city` will return only the `lastName` and `city` attributes in that order with `lastName` first.
* `suppress` – Suppresses the named attributes from the output. When not provided, no attributes are suppressed. suppress is applied after applying the query parameter attribute. E.g. `?suppress=firstName&amp;suppress=lastName` will not include lastName or firstName in the returned data.
* `callback` – Wrappers the returned JSON in a call to callbackvalue(...json...); to enable JSONP processing.
Query parameters are ignored if the input port's schema is `tuple&lt;rstring jsonString&gt;`.

The fixed URL `/ports/info` returns meta-data (using JSON) about all of the Streams ports that have associated URLs.

Tuples are converted to JSON using the `JSONEncoding` support from the Streams Java Operator API,
except for:
* If the input port's schema is `tuple&lt;rstring jsonString&gt;` then value is taken as is serialized JSON  and the resultant JSON is returned as the tuple's JSON value.
* Within a tuple any attribute that is `rstring jsonString`, then the value is taken as serialized JSON and it is placed into the tuple's JSON object as its deserialized JSON with key `jsonString`.

`HTTPTupleView`, [HTTPTupleInjection], [HTTPXMLInjection] and [WebContext] embed a Jetty webserver and all operator invocations in an SPL application that are co-located/fused in same partition (PE) will share a common Jetty instance. Thus by fusing these operators together with a common port value, a single web-server serving a single SPL application can be created. This sharing of the web-server by fusing multiple operators allows the operators to be logically connected in the SPL graph, rather than a single operator with multiple unrelated streams being connected to it.

Static content in the sub-directory `html` of the application's `opt` directory will also be served by the embedded web-server, thus allowing a complete web-application with live data to be served by an SPL application. The default URL for the web-server resolves to `{application_dir}/opt/html/index.html`.

Operators that support the `context` and `contextResourceBase` SPL parameters will serve static files from the `contextResourceBase` directory rooted at the supplied context path.

**Limitations**:
* Error handling is limited, incorrect URLs can crash the application, e.g. providing the wrong number of partition values.
* By default no security access is provided to the data, HTTPS must be explicitly configured.
</description>
        <images>
          <image size="16" uriIndex="27"/>
          <image size="32" uriIndex="28"/>
        </images>
        <parameter expressionMode="Constant" name="vmArg" optional="true" type="rstring">
          <description>
Specifies command-line arguments that are passed to the Java virtual machine that the operator runs within.
</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="certificateAlias" optional="true" type="rstring">
          <description>Alias of the certificate to use in the key store. When this parameter is set all connections use HTTPS.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="context" optional="true" type="rstring">
          <description>Define a URL context path that maps to the resources defined by`contextResourceBase`. This allows a composite that invokes this operator in a toolkit to provide resources regardless of the value of the application's data directory. For example setting it to *maps* would result in the URL */maps/index.html* mapping to the file *index.html* in the directory defined by `contextResourceBase`. Requires the parameter `contextResourceBase` to be set. If when the operator is initialized the context already exists then no action is taken. This allows multiple independent composites in the same toolkit to have common `context` and `contextResourceBase` settings, typically to point to a single set of HTML and Javascript resources for the toolkit.

If the operator provides URLs for its input or output ports then they are placed in the this context when this parameter is set. This then provides fixed locations for the URLs regardless of the depth of the operator invocation in the main composite.

Only a single context per invocation is supported.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="contextResourceBase" optional="true" type="rstring">
          <description>Directory location of resources that will be available through the the URL context defined by the parameter `context`. Typically used to allow a toolkit to provide a set of resources in a fixed location. The set of resources is recommended to be stored in the application_dir/opt directory, which is automatically included in the bundle by default. Path of this directory can be absolute or relative, if relative path is specified then it is relative to the application directory. A set of default resources is included in the toolkit directory under ToolkitDir/opt/resources and will be loaded by the operator. This default resources can be viewed at `http://hostname:8080/streamsx.inet.resources`. A path within the application is obtained using the SPL function `getThisToolkitDir()`. Thus a composite in the file *maps.spl* in the namespace directory `com.acme.streams.apps.map` might have the following setting to map `http://127.0.0.1:8080/maps` to `opt/resources/mapinfo` in the application.

    param
      context: “maps”
      contextResourceBase: getThisToolkitDir() + “/opt/resources/mapinfo”
</description>
        </parameter>
        <parameter cardinality="-1" expressionMode="AttributeFree" name="headers" optional="true" type="rstring">
          <description>List of headers to insert into the http reply. Formatted as header:value</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="keyPassword" optional="true" type="rstring">
          <description>Password to the certificate. If not provided, defaults to the value of `keyStorePassword`.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="keyStore" optional="true" type="rstring">
          <description>URL to the key store containing the certificate. If a relative file path then it is taken as relative to the application directory.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="keyStorePassword" optional="true" type="rstring">
          <description>Password to the key store.</description>
        </parameter>
        <parameter cardinality="-1" expressionMode="AttributeFree" name="partitionKey" optional="true" type="rstring">
          <description>Names of attributes to partition the window by. If the cardinality of this parameter is &gt; 1,then every value represents one attribute name. If the cadinality equals to 1, the value may contain one attribute name or a comma separated list of attribute names.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="port" optional="true" type="int32">
          <description>Port number for the embedded Jetty HTTP server. Defaults to 8080.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="trustStore" optional="true" type="rstring">
          <description>URL to the trust store containing client certificates. If a relative file path then it is taken as relative to the application directory. When this parameter is set, client authentication is required.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="trustStorePassword" optional="true" type="rstring">
          <description>Password to the trust store.</description>
        </parameter>
        <inputPort maxNumPorts="1" minNumPorts="1" optional="false" windowPunctInputMode="WindowBound">
          <description>Windowed input port whose tuples will be available using a HTTP GET request with a URL using port index 0.</description>
          <windowPolicy>Windowed</windowPolicy>
        </inputPort>
        <inputPort minNumPorts="0" optional="true" windowPunctInputMode="WindowBound">
          <description>Optional windowed input ports whose tuples will be available using a HTTP GET request a URL with the corresponding port index.</description>
          <windowPolicy>Windowed</windowPolicy>
        </inputPort>
      </primitiveOp>
      <primitiveOp language="Java" modelUriIndex="29" name="HTTPXMLInjection" public="true">
        <description>Embeds a Jetty web server to allow HTTP or HTTPS POST requests to submit a tuple on its output ports. Each output port corresponds to a unique URL comprising the operator name and the port index.

A single tuple is generated for an incoming POST request. The first attribute, which must be of SPL type `xml` in the output port's schema corresponds to the contents of the POST requiring content-type `application/xml`. Any other attributes will be set to their default value.

The URLs defined by this operator are:
* *prefix*`/ports/output/`*port index*`/inject` - Accepts POST requests of type `application/xml`.
* *prefix*`/ports/output/`*port index*`/info` - Output port meta-data including the stream attribute names and types (content type `application/json`).

The *prefix* for the URLs is:
* *context path*`/`*base operator name* - When the `context` parameter is set.
* *full operator name* - When the `context` parameter is **not** set.

**Limitations**:
* Error handling is limited, incorrect URLs can crash the application.
* By default no security access is provided to the data, HTTPS must be explicitly configured.</description>
        <images>
          <image size="16" uriIndex="30"/>
          <image size="32" uriIndex="31"/>
        </images>
        <parameter expressionMode="Constant" name="vmArg" optional="true" type="rstring">
          <description>
Specifies command-line arguments that are passed to the Java virtual machine that the operator runs within.
</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="certificateAlias" optional="true" type="rstring">
          <description>Alias of the certificate to use in the key store. When this parameter is set all connections use HTTPS.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="context" optional="true" type="rstring">
          <description>Define a URL context path that maps to the resources defined by`contextResourceBase`. This allows a composite that invokes this operator in a toolkit to provide resources regardless of the value of the application's data directory. For example setting it to *maps* would result in the URL */maps/index.html* mapping to the file *index.html* in the directory defined by `contextResourceBase`. Requires the parameter `contextResourceBase` to be set. If when the operator is initialized the context already exists then no action is taken. This allows multiple independent composites in the same toolkit to have common `context` and `contextResourceBase` settings, typically to point to a single set of HTML and Javascript resources for the toolkit.

If the operator provides URLs for its input or output ports then they are placed in the this context when this parameter is set. This then provides fixed locations for the URLs regardless of the depth of the operator invocation in the main composite.

Only a single context per invocation is supported.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="contextResourceBase" optional="true" type="rstring">
          <description>Directory location of resources that will be available through the the URL context defined by the parameter `context`. Typically used to allow a toolkit to provide a set of resources in a fixed location. The set of resources is recommended to be stored in the application_dir/opt directory, which is automatically included in the bundle by default. Path of this directory can be absolute or relative, if relative path is specified then it is relative to the application directory. A set of default resources is included in the toolkit directory under ToolkitDir/opt/resources and will be loaded by the operator. This default resources can be viewed at `http://hostname:8080/streamsx.inet.resources`. A path within the application is obtained using the SPL function `getThisToolkitDir()`. Thus a composite in the file *maps.spl* in the namespace directory `com.acme.streams.apps.map` might have the following setting to map `http://127.0.0.1:8080/maps` to `opt/resources/mapinfo` in the application.

    param
      context: “maps”
      contextResourceBase: getThisToolkitDir() + “/opt/resources/mapinfo”
</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="keyPassword" optional="true" type="rstring">
          <description>Password to the certificate. If not provided, defaults to the value of `keyStorePassword`.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="keyStore" optional="true" type="rstring">
          <description>URL to the key store containing the certificate. If a relative file path then it is taken as relative to the application directory.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="keyStorePassword" optional="true" type="rstring">
          <description>Password to the key store.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="port" optional="true" type="int32">
          <description>Port number for the embedded Jetty HTTP server. Defaults to 8080.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="trustStore" optional="true" type="rstring">
          <description>URL to the trust store containing client certificates. If a relative file path then it is taken as relative to the application directory. When this parameter is set, client authentication is required.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="trustStorePassword" optional="true" type="rstring">
          <description>Password to the trust store.</description>
        </parameter>
        <outputPort expressionMode="Nonexistent" maxNumPorts="1" minNumPorts="1" optional="false" windowPunctOutputMode="Free">
          <description>Emits a tuple for each POST request on the inject URL with port index 0</description>
        </outputPort>
        <outputPort expressionMode="Nonexistent" minNumPorts="0" optional="true" windowPunctOutputMode="Free">
          <description>Optional additional ports that emit a tuple for each POST request on the inject URL with the corresponding port index</description>
        </outputPort>
      </primitiveOp>
      <primitiveOp language="Java" modelUriIndex="32" name="HTTPXMLView" public="true">
        <description>REST API to view tuples from input ports.
Embeds a Jetty web server to provide HTTP or HTTPS REST access to the first XML attribute of the last tuple received by the input port.
The URLs defined by this operator are:
* *prefix*`/ports/input/`*port index*`/attribute` - Returns the value of the XML attribute (content type `application/xml`).
* *prefix*`/ports/input/`*port index*`/info` - Output port meta-data including all the stream attribute names and types (content type `application/json`).

The *prefix* for the URLs is:
* *context path*`/`*base operator name* - When the `context` parameter is set.
* *full operator name* - When the `context` parameter is **not** set.

The input port schema must contain an XML attribute whose value will be made available through the `/tuple` URL.

**Limitations**:
* By default no security access is provided to the data, HTTPS must be explicitly configured.
</description>
        <images>
          <image size="16" uriIndex="33"/>
          <image size="32" uriIndex="34"/>
        </images>
        <parameter expressionMode="Constant" name="vmArg" optional="true" type="rstring">
          <description>
Specifies command-line arguments that are passed to the Java virtual machine that the operator runs within.
</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="certificateAlias" optional="true" type="rstring">
          <description>Alias of the certificate to use in the key store. When this parameter is set all connections use HTTPS.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="context" optional="true" type="rstring">
          <description>Define a URL context path that maps to the resources defined by`contextResourceBase`. This allows a composite that invokes this operator in a toolkit to provide resources regardless of the value of the application's data directory. For example setting it to *maps* would result in the URL */maps/index.html* mapping to the file *index.html* in the directory defined by `contextResourceBase`. Requires the parameter `contextResourceBase` to be set. If when the operator is initialized the context already exists then no action is taken. This allows multiple independent composites in the same toolkit to have common `context` and `contextResourceBase` settings, typically to point to a single set of HTML and Javascript resources for the toolkit.

If the operator provides URLs for its input or output ports then they are placed in the this context when this parameter is set. This then provides fixed locations for the URLs regardless of the depth of the operator invocation in the main composite.

Only a single context per invocation is supported.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="contextResourceBase" optional="true" type="rstring">
          <description>Directory location of resources that will be available through the the URL context defined by the parameter `context`. Typically used to allow a toolkit to provide a set of resources in a fixed location. The set of resources is recommended to be stored in the application_dir/opt directory, which is automatically included in the bundle by default. Path of this directory can be absolute or relative, if relative path is specified then it is relative to the application directory. A set of default resources is included in the toolkit directory under ToolkitDir/opt/resources and will be loaded by the operator. This default resources can be viewed at `http://hostname:8080/streamsx.inet.resources`. A path within the application is obtained using the SPL function `getThisToolkitDir()`. Thus a composite in the file *maps.spl* in the namespace directory `com.acme.streams.apps.map` might have the following setting to map `http://127.0.0.1:8080/maps` to `opt/resources/mapinfo` in the application.

    param
      context: “maps”
      contextResourceBase: getThisToolkitDir() + “/opt/resources/mapinfo”
</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="keyPassword" optional="true" type="rstring">
          <description>Password to the certificate. If not provided, defaults to the value of `keyStorePassword`.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="keyStore" optional="true" type="rstring">
          <description>URL to the key store containing the certificate. If a relative file path then it is taken as relative to the application directory.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="keyStorePassword" optional="true" type="rstring">
          <description>Password to the key store.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="port" optional="true" type="int32">
          <description>Port number for the embedded Jetty HTTP server. Defaults to 8080.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="trustStore" optional="true" type="rstring">
          <description>URL to the trust store containing client certificates. If a relative file path then it is taken as relative to the application directory. When this parameter is set, client authentication is required.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="trustStorePassword" optional="true" type="rstring">
          <description>Password to the trust store.</description>
        </parameter>
        <inputPort maxNumPorts="1" minNumPorts="1" optional="false" windowPunctInputMode="Oblivious">
          <description>Input port whose first XML attribute will be available using a HTTP GET request with a URL using port index 0.</description>
          <windowPolicy>NonWindowed</windowPolicy>
        </inputPort>
      </primitiveOp>
      <primitiveOp language="Java" modelUriIndex="35" name="WebContext" public="true">
        <description>Embeds a Jetty web server to provide HTTP or HTTPS REST access to files defined by the `context` and `contextResourceBase` parameters.
**Limitations**:
 * By default no security access is provided to the data, HTTPS must be explicitly configured.</description>
        <images>
          <image size="16" uriIndex="36"/>
          <image size="32" uriIndex="37"/>
        </images>
        <parameter expressionMode="Constant" name="vmArg" optional="true" type="rstring">
          <description>
Specifies command-line arguments that are passed to the Java virtual machine that the operator runs within.
</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="certificateAlias" optional="true" type="rstring">
          <description>Alias of the certificate to use in the key store. When this parameter is set all connections use HTTPS.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="context" optional="false" type="rstring">
          <description>Define a URL context path that maps to the resources defined by`contextResourceBase`. This allows a composite that invokes this operator in a toolkit to provide resources regardless of the value of the application's data directory. For example setting it to *maps* would result in the URL */maps/index.html* mapping to the file *index.html* in the directory defined by `contextResourceBase`. Requires the parameter `contextResourceBase` to be set. If when the operator is initialized the context already exists then no action is taken. This allows multiple independent composites in the same toolkit to have common `context` and `contextResourceBase` settings, typically to point to a single set of HTML and Javascript resources for the toolkit.

If the operator provides URLs for its input or output ports then they are placed in the this context when this parameter is set. This then provides fixed locations for the URLs regardless of the depth of the operator invocation in the main composite.

Only a single context per invocation is supported.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="contextResourceBase" optional="false" type="rstring">
          <description>Directory location of resources that will be available through the the URL context defined by the parameter `context`. Typically used to allow a toolkit to provide a set of resources in a fixed location. The set of resources is recommended to be stored in the application_dir/opt directory, which is automatically included in the bundle by default. Path of this directory can be absolute or relative, if relative path is specified then it is relative to the application directory. A set of default resources is included in the toolkit directory under ToolkitDir/opt/resources and will be loaded by the operator. This default resources can be viewed at `http://hostname:8080/streamsx.inet.resources`. A path within the application is obtained using the SPL function `getThisToolkitDir()`. Thus a composite in the file *maps.spl* in the namespace directory `com.acme.streams.apps.map` might have the following setting to map `http://127.0.0.1:8080/maps` to `opt/resources/mapinfo` in the application.

    param
      context: “maps”
      contextResourceBase: getThisToolkitDir() + “/opt/resources/mapinfo”
</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="keyPassword" optional="true" type="rstring">
          <description>Password to the certificate. If not provided, defaults to the value of `keyStorePassword`.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="keyStore" optional="true" type="rstring">
          <description>URL to the key store containing the certificate. If a relative file path then it is taken as relative to the application directory.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="keyStorePassword" optional="true" type="rstring">
          <description>Password to the key store.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="port" optional="true" type="int32">
          <description>Port number for the embedded Jetty HTTP server. Defaults to 8080.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="trustStore" optional="true" type="rstring">
          <description>URL to the trust store containing client certificates. If a relative file path then it is taken as relative to the application directory. When this parameter is set, client authentication is required.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="trustStorePassword" optional="true" type="rstring">
          <description>Password to the trust store.</description>
        </parameter>
      </primitiveOp>
      <function modelUriIndex="13" name="obfuscate" native="true" public="true" returnType="T" uriIndex="0">
        <description>Obfuscate a password for an operator in this namespace.If the password is starts with `OBF:` then it is assumed to be already obfuscated and input is returned unchanged. This allowsexternal tools to pass submission time values that are already obfuscated. The Eclipse Jetty class `org.eclipse.jetty.util.security.Password` is the underlying utility.</description>
        <prototype>&lt;string T&gt; public T obfuscate(T password)</prototype>
        <parameter name="password" type="T"/>
      </function>
      <type column="6" line="16" name="HTTPRequest" static="true" type="int64 key, rstring request, rstring contentType, map&lt;rstring, rstring> header, rstring response, rstring method, rstring pathInfo, int32 status, rstring statusMessage" uriIndex="4"/>
      <type column="6" line="50" name="MarkerType" static="true" type="enum { BLUE, GREEN, YELLOW, RED, WARNING, AWARD }" uriIndex="5"/>
      <type column="6" line="56" name="MappedPosition" static="true" type="tuple&lt;rstring id, float64 latitude, float64 longitude>" uriIndex="5"/>
      <type column="6" line="64" name="MappedPositionMarker" static="true" type="MappedPosition, tuple&lt;MarkerType markerType, rstring note>" uriIndex="5"/>
      <type column="6" line="71" name="MappedPositionIcon" static="true" type="MappedPosition, tuple&lt;rstring markerType, rstring note>" uriIndex="5"/>
      <type column="6" line="78" name="MappedPositionMarkerLayer" static="true" type="MappedPositionMarker, tuple&lt;rstring layer>" uriIndex="5"/>
      <type column="6" line="85" name="MappedPositionIconLayer" static="true" type="MappedPositionIcon, tuple&lt;rstring layer>" uriIndex="5"/>
      <enumLiterals column="26" line="50" typeName="MarkerType" uriIndex="5">
        <enum>BLUE</enum>
        <enum>GREEN</enum>
        <enum>YELLOW</enum>
        <enum>RED</enum>
        <enum>WARNING</enum>
        <enum>AWARD</enum>
      </enumLiterals>
    </namespace>
    <namespace name="com.ibm.streamsx.inet">
      <primitiveOp language="Cpp" modelUriIndex="39" name="InetSource" public="true">
        <description docHref="doc/${nl}/spldoc/html/tk$com.ibm.streamsx.inet/op$com.ibm.streamsx.inet$InetSource.html">
The `InetSource` operator periodically retrieves data from network servers
and generates a stream from those contents. This operator can also be used to stream the contents of local files.
The `InetSource` operator shares some characteristics with the `FileSource` operator from the IBM Streams Processing Language (SPL)
standard toolkit, but it provides more functions.
The two operators differ in the following ways:

* The `FileSource` operator reads from local files.
  In addition to reading local files, the `InetSource` operator supports remote reading of files by using HTTP, HTTPS, and FTP.

* By default, the `FileSource` operator reads its target input only once.
  By default, the `InetSource` operator periodically checks the target files for updates on a user-controllable schedule.
  In addition, you can choose to use the `InetSource` operator to either stream out of the entire target file contents on each read,
  or stream out only the additions to the contents of the target file since the previous read.

* The `FileSource` operator supports a single target for reading, while the `InetSource` operator can support multiple targets.
  The URI of each target can use any of the supported protocols (HTTP, HTTPS, FTP, FTPS, or FILE) and a mix of these protocols.
  An example of multi-target reading is in the `WeatherConditions.spl` file within the Commodity Purchasing Sample Application,
  where 24 HTTP-based URLs are simultaneously monitored for changes.

The data retrieved is implicitly assigned to the first output attribute that does not have explicit output assignments. The data attribute must be of type `rstring`, `list&lt;rstring&gt;`, `blob`, or `xml`:

* When the data attribute is of type `rstring` or `list&lt;rstring&gt;`, the retrieved data is assumed to contain text: the operator parses the data into lines and assigns them to the attribute in one or more output tuples, according to the `emitTuplePerXxxx` parameters.

* When the data attribute is of type `blob` or `xml`, all of the retrieved data is assigned to the attribute in one output tuple, and the `emitTuplePerXxxx` parameters are ignored. Note that if the attribute is of type `xml` and the retrieved data contains invalid XML, an error is logged and no output is produced.

Other output attributes may be assigned values explicitly using the operator's output assignment functions. These functions assign the requested and responding URLs, the response code, the data type, and the elapsed time for fetching the data.

The output stream of the `InetSource` operator can be fed into a `Functor`
operator with custom logic to parse the data into any number of SPL types. For
more information and examples, see the `WeatherConditions.spl` and
`GetHeadlines.spl` sample applications.

By default, there is no time limit for fetching data from remote servers;
servers that accept a request but do not return a response can block the
operator indefinitely. Optionally, a time limit for fetching data can be
specified. If the time limit is exceeded, the fetch is canceled, an error is
logged, and no output is produced.

**Behavior in a consistent region**

This operator cannot be used in a consistent region.

**Note:** The `InetSource` operator uses the open source libcurl library to enable data transfer for various protocols,
including HTTP, HTTPS, FTP, and FTPS. Proxy support can be enabled by configuring the **http_proxy**, **HTTPS_PROXY**, **FTP_PROXY**,
and **ALL_PROXY** environment variables as described on the curl man page at the following link: [http://curl.haxx.se/docs/manpage.html].

+ Examples

This example demonstrates how to use the `InetSource` operator:

    stream &lt;rstring metarObsRecord&gt; WxObservations = InetSource () {
      param
        URIList:
        ["http://weather.noaa.gov/pub/data/observations/meta/cycles/07Z.TXT",
        "http://weather.noaa.gov/pub/data/observations/meta/cycles/08Z.TXT"];
        initDelay: 5.0;
        incrementalFetch: true;
        fetchIntervalSeconds: 60u;
    }

</description>
        <images>
          <image size="16" uriIndex="40"/>
          <image size="32" uriIndex="41"/>
        </images>
        <outputFunctions name="InetSourceOutputAssignments">
          <function name="TargetURL" returnType="rstring">
            <description>
              This function assigns the URL that was requested when fetching the data assigned to the data attribute. This is one of the URLs specified in the 'URLList' parameter.
            </description>
            <prototype>rstring TargetURL()</prototype>
          </function>
          <function name="EffectiveURL" returnType="rstring">
            <description>
              This function assigns the URL that responded when fetching the data assigned to the data attribute. This may be one of the URLs specified in the 'URLList' parameter, or it may be different if the requested URL was redirected elsewhere.
            </description>
            <prototype>rstring EffectiveURL()</prototype>
          </function>
          <function name="ContentType" returnType="rstring">
            <description>
              This function assigns the value of the 'ContentType' header from an HTTP response, if the data fetched was an HTTP response and a 'ContentType' header was inclued, or else an empty string if not.
            </description>
            <prototype>rstring ContentType()</prototype>
          </function>
          <function name="ResponseCode" returnType="int32">
            <description>
              This function assigns the value of the response code.
            </description>
            <prototype>int32 ResponseCode()</prototype>
          </function>
          <function name="FetchTime" returnType="float64">
            <description>
              This function assigns the elapsed time the fetch took to complete, in seconds
            </description>
            <prototype>float64 FetchTime()</prototype>
          </function>
          <function name="copy" returnType="T">
            <description>
            </description><prototype>&lt;any T&gt; T copy()</prototype>
          </function>
        </outputFunctions>
        <parameter cardinality="-1" expressionMode="AttributeFree" name="URIList" optional="false" type="list&lt;rstring>">
          <description>
          This parameter specifies a comma-separated list of quoted strings that contain Uniform Resource Identifiers (URIs) from which you want to retrieve data. A fetch request is sent to each URI in the list and processing occurs on any data that is returned. Each URI in the list must include the protocol to be used when making a retrieval request to that URI; supported protocols include HTTP, HTTPS, FTP, FTPS, and file. For the file protocol, there is support for accessing the input file by using either absolute paths or relative paths. Absolute paths must be preceded by a slash (`/`), denoting the top-most directory where the file is located. Relative paths are rooted at the data directory which is created automatically by the SPL compiler under the current application directory. Thus, an absolute path access will result in four slashes (`////`) after the file protocol, that is, `file:////`, while a relative path access will result in three slashes (`///`) after the file protocol, that is,`file:///`. If there is more than one URI in the list, each URI can use any of the supported protocols. This parameter is required and must have at least one quoted URI rstring in its value list.
        </description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="ignoreURIcheckException" optional="true" type="boolean">
          <description>
          This optional parameter has the default value false. In the default case the supplied URI value is checked against RFC 2396. If the validation fails, an dynamically supplied URI is ignored and a statically supplied URI stops execution. If this parameter is set to true the result of the URI check is ignored and the URI is passed unchecked. In this case no canonical path extension and no adaptation to the data directory is available for file schema.
        </description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="initDelay" optional="true" type="float64">
          <description>This parameter specifies an initial processing delay, in seconds, before the InetSource operator begins emitting tuples. This parameter is optional; if present, it must have exactly one value of type float64 that is an expression which can be evaluated at operator startup time.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="inputLinesPerRecord" optional="true" type="uint32">
          <description>
          The InetSource operator starts its processing by formatting the data that is retrieved from the source URI into individual records. Each record is then copied into the attribute of the output stream tuple (if the attribute type is an `rstring`) or appended as a member to the end of the attribute (if the attribute type is a `list&lt;rstring&gt;` data type). By default, each line in the source URI is considered to be a single record and is carried into the tuple attribute directly. However, it is also fairly common for the data in the source URI to be laid out as multiple lines per logical record. For example, each logical record might be formatted within the raw input data as two non-blank lines followed by a blank line, for a total record length of three consecutive lines of text within the raw input data. For such cases, the *inputLinesPerRecord* modifier is used. If this modifier is specified, the operator reads n lines of the input file and concatenates them into a single logical record, placing a blank character as a pad value between them. Note that the pad character can be changed to a different value by using the `intraRecordPadValue` parameter, which is specified by using a double-quoted string of zero or more characters. Both parameters are optional; if present, `inputLinesPerRecord` must have exactly one value of type uint32 that is an expression which can be evaluated at compile time; and intraRecordPadValue must have exactly one value of type rstring that is an expression which can be evaluated at compile time.
        </description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="intraRecordPadValue" optional="true" type="rstring">
          <description>
          The InetSource operator starts its processing by formatting the data that is retrieved from the source URI into individual records. Each record is then copied into the attribute of the output stream tuple (if the attribute type is an `rstring`) or appended as a member to the end of the attribute (if the attribute type is a `list&lt;rstring&gt;` data type). By default, each line in the source URI is considered to be a single record and is carried into the tuple attribute directly. However, it is also fairly common for the data in the source URI to be laid out as multiple lines per logical record. For example, each logical record might be formatted within the raw input data as two non-blank lines followed by a blank line, for a total record length of three consecutive lines of text within the raw input data. For such cases, the *inputLinesPerRecord* modifier is used. If this modifier is specified, the operator reads n lines of the input file and concatenates them into a single logical record, placing a blank character as a pad value between them. Note that the pad character can be changed to a different value by using the `intraRecordPadValue` parameter, which is specified by using a double-quoted string of zero or more characters. Both parameters are optional; if present, `inputLinesPerRecord` must have exactly one value of type uint32 that is an expression which can be evaluated at compile time; and intraRecordPadValue must have exactly one value of type rstring that is an expression which can be evaluated at compile time.
        </description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="fetchInterval" optional="true" type="float64">
          <description>
          One of the important differences between the InetSource and the SPL Standard Toolkit source operators is the ability of the InetSource operator to periodically refetch the data from the target URI or list of URIs. By default, the InetSource operator reexamines each URI in the target every ten minutes (600 seconds), but this interval can be customized by using the `fetchInterval` parameter. Note that the interval begins immediately after the final piece of data from a given fetch is processed, so the next fetch will begin at (*processing_time* + `fetchInterval`) after the start of the current fetch. This parameter is optional; if present, it must have exactly one value of type uint32 that is an expression which can be evaluated at compile time.
        </description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="incrementalFetch" optional="true" type="boolean">
          <description>
          By default, the InetSource operator streams out the entire contents of each URI (remote server, or local file) as it exists at the time of each fetch, unless the URI's content timestamp is unchanged from the previous fetch (in which case the InetSource operator does not stream out any content). If you want the InetSource operator to stream out the URI contents starting at the first line that is different since the previous fetch, use the `incrementalFetch` parameter. This parameter is optional; if present, it must have exactly one value that is a boolean constant.

          **Note:** The InetSource operator uses the open-source `libcurl` package for performing its content retrievals. The precise mechanism that `libcurl` uses to determine whether the timestamp on the target content has changed, is not documented in the `libcurl` API specification. For reference, see [http://curl.haxx.se/libcurl/c/curl_easy_setopt.html#CURLOPTTIMECONDITION].
        </description>
        </parameter>
        <parameter cardinality="1" expressionMode="Constant" name="doNotStreamInitialFetch" optional="true" type="boolean">
          <description>
          By default, the InetSource operator will start streaming out the contents of its target URI(s) on the very first fetch interval. If you want to suppress the streaming out of the first fetch results, use the `doNotStreamInitialFetch` parameter. This modifier is especially useful when monitoring the state of files that might have leftover data in them from a previous application run, where you do not want to reprocess that data again. Note that this modifier is not very useful unless you also specify the `incrementalFetch` parameter with it. The effect of specifying both modifiers is to instruct the InetSource operator to load its cache on the initial fetch, then start streaming out additions to the target URIs on subsequent fetches. This parameter is optional; if present, it must have exactly one value that is a boolean constant.
        </description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="unconditionalFetch" optional="true" type="boolean">
          <description>
          As mentioned in the previous paragraph, the default behavior of the InetSource operator is to query the target device for the last-modified timestamp on each URI in the `URIList` parameter. The last-modified timestamp is used to determine whether to retrieve and stream out the data for that URI during the current retrieval cycle. If you want the InetSource operator to disregard this timestamp and stream out the entire contents on every retrieval, use the unconditionalFetch modifier. This parameter is optional; if present, it must have exactly one value that is a boolean constant.
        </description>
        </parameter>
        <parameter cardinality="1" expressionMode="Constant" name="emitTuplePerFetch" optional="true" type="boolean">
          <description>
          This parameter controls how frequently a tuple is emitted from the InetSource operator. It is mutually exclusive with the `emitTuplePerURI` and `emitTuplePerRecordCount` parameters. When this parameter is specified, the output schema must be of type list&lt;rstring&gt; because the data from each fetch is contained in an element of the attribute. This parameter is optional; if present, it must have exactly one value that is a boolean constant.
	    </description>
        </parameter>
        <parameter cardinality="1" expressionMode="Constant" name="emitTuplePerURI" optional="true" type="boolean">
          <description>
          This parameter controls how frequently a tuple is emitted from the InetSource operator. It is mutually exclusive with the `emitTuplePerFetch` and `emitTuplePerRecordCount` parameters. When this parameter is specified, the output schema must be of type list&lt;rstring&gt; because the data from each URI is contained in an element of the attribute. This parameter is optional; if present, it must have exactly one value that is a boolean constant.
        </description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="emitTuplePerRecordCount" optional="true" type="uint32">
          <description>
          This parameter controls how frequently a tuple is emitted from the InetSource operator. It is mutually exclusive with the `emitTuplePerFetch` and `emitTuplePerURI` paramters. When this parameter is specified, a tuple is emitted each time the specified number of records are received. The output schema must be of type list&lt;rstring&gt; because string data that exceeds the SPL string length limit is broken up into multiple elements in the output list. By default, a line is a record. If you change the `inputLinesPerRecord` parameter, this changes. The emit parameters control how those records are added to the output tuple. If `inputLinesPerRecord` is higher than the number of lines read, then you only get as many lines as were read. With multiple URIs, records never span content from URIs, however the emit parameters control how the records are put into tuples and when tuples are submitted (as described in each emit parameter section). This parameter is optional; if present, it must have exactly one value of type uint32 that is an expression which can be evaluated at compile time.
        </description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="punctPerFetch" optional="true" type="boolean">
          <description>
          This parameter determines whether window punctuation is emitted after each fetch. A fetch consists of retrieving data from all of the URIs in the list. One window marker is submitted after each fetch, including a fetch that returns no data (or no updated data, depending on the parameters). So with 3 URIs and a period of 10 minutes, you would get a window marker every 10 minutes or so, depending on how long it takes to fetch, even if no output tuple is submitted as a result of that 10-minute fetch cycle. This parameter is optional; if present, it must have exactly one value that is a boolean constant.
        </description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="iterations" optional="true" type="uint32">
          <description>
          This parameter specifies how many times the operator will fetch data from the URLs specified by the `URLList` parameter. If the `iterations` parameter is not specified, or if a value of zero is specified, the operator will iterate endlessly, until the PE terminates. In any case, the operator pauses after each fetch, as specified by the `fetchInterval` parameter, except the last one.
        </description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="timeout" optional="true" type="int32">
          <description>
          This parameter specifies a timeout, in seconds, for fetching data from the URLs specified by the 'URLList' parameter. If not specified, no timeout is set, and remote servers that accept requests but do not respond quickly will block the operator.
        </description>
        </parameter>
        <outputPort expressionMode="Expression" maxNumPorts="1" minNumPorts="1" optional="false" windowPunctOutputMode="Generating">
          <description/>
        </outputPort>
        <codeTemplate name="InetSource" template="stream&lt;${streamType}> ${streamName} = InetSource() {&#xA;            param&#xA;                URIList : [&quot;${urilistitem}&quot;];&#xA;        }">
          <description>Basic InetSource template</description>
        </codeTemplate>
      </primitiveOp>
      <function modelUriIndex="38" name="parseDatestring" native="true" public="true" returnType="int64" uriIndex="0">
        <description>

        This function converts a string that specifies a date and time into a
        64-bit integer corresponding to the 'unix epoch' value of that date and
        time, which is the number of seconds since midnight on January 1st, 1970
        in Greenwich, England. It recognizes all of the date and time formats
        allowed in HTTP messages. For example:

        Sun, 06 Nov 1994 08:49:37 GMT

        Sunday, 06-Nov-94 08:49:37 GMT

        Sun Nov  6 08:49:37 1994

        06 Nov 1994 08:49:37 GMT

        06-Nov-94 08:49:37 GMT

        Nov  6 08:49:37 1994

        06 Nov 1994 08:49:37

        06-Nov-94 08:49:37

        1994 Nov 6 08:49:37

        GMT 08:49:37 06-Nov-94 Sunday

        94 6 Nov 08:49:37

        1994 Nov 6

        06-Nov-94

        Sun Nov 6 94

        1994.Nov.6

        Sun/Nov/6/94/GMT

        Sun, 06 Nov 1994 08:49:37 CET

        06 Nov 1994 08:49:37 EST

        Sun, 12 Sep 2004 15:05:58 -0700

        Sat, 11 Sep 2004 21:32:11 +0200

        20040912 15:05:58 -0700

        20040911 +0200

        For details, see [https://curl.haxx.se/libcurl/c/curl_getdate.html].

        </description>
        <prototype>public int64 parseDatestring(rstring datestring)</prototype>
        <parameter name="datestring" type="rstring"/>
      </function>
    </namespace>
    <namespace name="com.ibm.streamsx.inet.http">
      <primitiveOp language="Java" modelUriIndex="43" name="HTTPGetJSONContent" public="true">
        <description>Periodically connects to an HTTP endpoint to GET JSON content as a single tuple. The JSON content is assigned  to the `jsonString` attribute in the output tuple which must be of type `rstring`.

**This operator will be deprecated.** Use a combination of HTTPRequest and Beacon operator instead.</description>
        <images>
          <image size="16" uriIndex="44"/>
          <image size="32" uriIndex="45"/>
        </images>
        <parameter expressionMode="Constant" name="vmArg" optional="true" type="rstring">
          <description>
Specifies command-line arguments that are passed to the Java virtual machine that the operator runs within.
</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="acceptAllCertificates" optional="true" type="boolean">
          <description>Accept all SSL certificates, even those that are self-signed. Setting this option will allow potentially insecure connections. Default is false.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="Attribute" name="contentAttribute" optional="true" type="rstring">
          <description>Output attribute to assign content to.</description>
        </parameter>
        <parameter cardinality="-1" expressionMode="AttributeFree" name="extraHeaders" optional="true" type="rstring">
          <description>Extra headers to send with request, format is "Header-Name: value"</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="initDelay" optional="true" type="int64">
          <description>Delay in seconds before the operator starts producing tuples.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="iterations" optional="true" type="int32">
          <description>The number of tuples to submit. Negative value or zero means continually fetch and submit tuples.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="period" optional="true" type="float64">
          <description>Polling period in seconds. Tuples will be fetched every `period` seconds.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="url" optional="false" type="rstring">
          <description>URL to HTTP GET content from.</description>
        </parameter>
        <outputPort expressionMode="Nonexistent" maxNumPorts="1" minNumPorts="1" optional="false" windowPunctOutputMode="Free">
          <description>Content of the HTTP GET request as an JSON attribute. Each successful HTTP request that returns a content results in a submitted tuple with an rstring attribute containing the returned content.</description>
        </outputPort>
      </primitiveOp>
      <primitiveOp language="Java" modelUriIndex="46" name="HTTPGetStream" public="true">
        <description>Connects to an HTTP endpoint, reads "chunks" of data and sends it to the output port. Every line read from the HTTP server endpoint is sent as a single tuple. If a connection is closed by the server, a WINDOW punctuation will be sent on port 0. Supported Authentications: Basic Authentication, OAuth 1.0a. Supported Compressions: Gzip, Deflate.

**Behavior in a consistent region**

This operator cannot be used inside a consistent region.

**This operator will be deprecated.** Use a combination of HTTPRequest and Beacon operator instead.</description>
        <images>
          <image size="16" uriIndex="47"/>
          <image size="32" uriIndex="48"/>
        </images>
        <parameter expressionMode="Constant" name="vmArg" optional="true" type="rstring">
          <description>
Specifies command-line arguments that are passed to the Java virtual machine that the operator runs within.
</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="acceptAllCertificates" optional="true" type="boolean">
          <description>Accept all SSL certificates, even those that are self-signed. Setting this option will allow potentially insecure connections. Default is false.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="authenticationFile" optional="true" type="rstring">
          <description>Path to the properties file containing authentication information. Authentication file is recommended to be stored in the application_dir/etc directory. Path of this file can be absolute or relative, if relative path is specified then it is relative to the application directory. See http_auth_basic.properties in the toolkits etc directory for a sample of basic authentication properties.</description>
        </parameter>
        <parameter cardinality="-1" expressionMode="AttributeFree" name="authenticationProperty" optional="true" type="rstring">
          <description>Properties to override those in the authentication file.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="authenticationType" optional="true" type="rstring">
          <description>Valid options are "oauth", "basic" and "none". Default is "none". If the "oauth" option is selected, the requests will be singed using OAuth 1.0a.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="backoff" optional="true" type="boolean">
          <description>Use a backoff function for increasing the wait time between retries. Wait times increase by a factor of 10. Default is false</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="dataAttributeName" optional="true" type="rstring">
          <description>Name of the attribute to populate the response data with. Default is "data"</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="disableCompression" optional="true" type="boolean">
          <description>By default the client will ask the server to compress its reponse data using supported compressions (gzip, deflate). Setting this option to true will disable compressions. Default is false.</description>
        </parameter>
        <parameter cardinality="-1" expressionMode="AttributeFree" name="extraHeaders" optional="true" type="rstring">
          <description>Extra headers to send with request, format is "Header-Name: value".</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="maxRetries" optional="true" type="int32">
          <description>Maximum number of retries in case of failures/disconnects.</description>
        </parameter>
        <parameter cardinality="-1" expressionMode="AttributeFree" name="postData" optional="true" type="rstring">
          <description>The value for this parameter will be sent to the server as a POST request body. The value is expected to be in "key=value" format. </description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="retryDelay" optional="true" type="float64">
          <description>Wait time between retries in case of failures/disconnects.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="retryOnClose" optional="true" type="boolean">
          <description>Retry connecting if the connection has been closed. Default is false</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="url" optional="false" type="rstring">
          <description>URL endpoint to connect to.</description>
        </parameter>
        <outputPort expressionMode="Nonexistent" maxNumPorts="1" minNumPorts="1" optional="false" windowPunctOutputMode="Generating">
          <description>Data received from the server will be sent on this port.</description>
        </outputPort>
        <outputPort expressionMode="Nonexistent" maxNumPorts="1" minNumPorts="1" optional="true" windowPunctOutputMode="Free">
          <description>Error information will be sent out on this port including the response code and any message recieved from the server. Tuple structure must conform to the [HTTPResponse] type specified in this namespace.</description>
        </outputPort>
      </primitiveOp>
      <primitiveOp language="Java" modelUriIndex="49" name="HTTPGetXMLContent" public="true">
        <description>Periodically connects to an HTTP endpoint to GET XML content as a single tuple. The XML content is assigned  to the first attribute in the output tuple which must be of type `xml`.The URL can have a single query parameter updated using the `updateParameter` parameter.When set the URL query string will be modified to set the named parameter to a new value.The default action is to set it to the number of milliseconds since the 1970 epoch.</description>
        <images>
          <image size="16" uriIndex="50"/>
          <image size="32" uriIndex="51"/>
        </images>
        <parameter expressionMode="Constant" name="vmArg" optional="true" type="rstring">
          <description>
Specifies command-line arguments that are passed to the Java virtual machine that the operator runs within.
</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="acceptAllCertificates" optional="true" type="boolean">
          <description>Accept all SSL certificates, even those that are self-signed. Setting this option will allow potentially insecure connections. Default is false.</description>
        </parameter>
        <parameter cardinality="-1" expressionMode="AttributeFree" name="extraHeaders" optional="true" type="rstring">
          <description>Extra headers to send with request, format is "Header-Name: value"</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="initDelay" optional="true" type="int64">
          <description>Delay in seconds before the operator starts producing tuples.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="iterations" optional="true" type="int32">
          <description>The number of tuples to submit. Negative value or zero means continually fetch and submit tuples.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="period" optional="true" type="float64">
          <description>Polling period in seconds. Tuples will be fetched every `period` seconds.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="updateParameter" optional="true" type="rstring">
          <description>URL query parameter to update based upon content in a successful request.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="updateParameterFromContent" optional="true" type="rstring">
          <description>Update the query parameter set in `updateParameter` from the value of this XPath expression against the returned content.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="url" optional="false" type="rstring">
          <description>URL to HTTP GET content from.</description>
        </parameter>
        <outputPort expressionMode="Nonexistent" maxNumPorts="1" minNumPorts="1" optional="false" windowPunctOutputMode="Free">
          <description>Content of the HTTP GET request as an XML attribute. Each successful HTTP request that returns a single well-formed XML document results in a submitted tuple with an XML attribute containing the returned content.</description>
        </outputPort>
      </primitiveOp>
      <primitiveOp language="Java" modelUriIndex="52" name="HTTPPost" public="true">
        <description>This operator sends incoming tuples to the specified HTTP server as part of a POST request. A single tuple will be sent as a body of one HTTP POST request. Certain authentication modes are supported. Tuples are sent to the server one at a time in order of receipt. If the HTTP server cannot be accessed, the operation will be retried on the current thread and may temporarily block any additional tuples that arrive on the input port. By default, the data is sent in application/x-www-form-urlencoded UTF-8 encoded format.

**Behavior in a consistent region**


This operator cannot be placed at the start of a consistent region.

**This operator will be deprecated.** Use HTTPRequest operator instead.</description>
        <images>
          <image size="16" uriIndex="53"/>
          <image size="32" uriIndex="54"/>
        </images>
        <parameter expressionMode="Constant" name="vmArg" optional="true" type="rstring">
          <description>
Specifies command-line arguments that are passed to the Java virtual machine that the operator runs within.
</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="acceptAllCertificates" optional="true" type="boolean">
          <description>Accept all SSL certificates, even those that are self-signed. Setting this option will allow potentially insecure connections. Default is false.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="authenticationFile" optional="true" type="rstring">
          <description>Path to the properties file containing authentication information. Authentication file is recommended to be stored in the application_dir/etc directory. Path of this file can be absolute or relative, if relative path is specified then it is relative to the application directory. See http_auth_basic.properties in the toolkits etc directory for a sample of basic authentication properties.</description>
        </parameter>
        <parameter cardinality="-1" expressionMode="AttributeFree" name="authenticationProperty" optional="true" type="rstring">
          <description>Properties to override those in the authentication file.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="authenticationType" optional="true" type="rstring">
          <description>Valid options are "basic" and "none". Default is "none".</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="connectionTimeout" optional="true" type="float64">
          <description>Optional parameter specifies amount of time (in seconds) that the operator waits for the connection for to be established. Default is 60.</description>
        </parameter>
        <parameter cardinality="-1" expressionMode="AttributeFree" name="extraHeaders" optional="true" type="rstring">
          <description>Extra headers to send with request, format is "Header-Name: value".</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="headerContentType" optional="true" type="rstring">
          <description>Set the content type of the HTTP request.  If the value is set to "application/json" then the entire tuple is sent in JSON format using SPL's standard tuple to JSON encoding, if the input schema is `tuple&lt;rstring jsonString&gt;` then `jsonString` is assumed to already be JSON and its value is sent as the content.  Default is "application/x-www-form-urlencoded". Note that if a value other than the above mentioned ones is specified, the input stream can only have a single attribute.</description>
        </parameter>
        <parameter cardinality="-1" expressionMode="Attribute" name="include" optional="true">
          <description>Specify attributes used to compose the POST. Comma separated list of attribute names that will be posted to the url. The parameter is invalid if HeaderContentType is not "application/json" or "application/x-www-form-urlencoded". Default is to send all attributes.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="keyStoreFile" optional="true" type="rstring">
          <description>Path to .jks file used for server and client authentication</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="keyStorePassword" optional="true" type="rstring">
          <description>Password for the keyStore and the keys it contains</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="maxRetries" optional="true" type="int32">
          <description>Maximum number of retries in case of failures/disconnects.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="retryDelay" optional="true" type="float64">
          <description>Wait time between retries in case of failures/disconnects.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="url" optional="false" type="rstring">
          <description>URL to connect to</description>
        </parameter>
        <inputPort maxNumPorts="1" minNumPorts="1" optional="false" windowPunctInputMode="Oblivious">
          <description>By default, all attributes of the input stream are sent as POST data to the specified HTTP server.</description>
          <windowPolicy>NonWindowed</windowPolicy>
        </inputPort>
        <outputPort expressionMode="Nonexistent" maxNumPorts="1" minNumPorts="1" optional="true" windowPunctOutputMode="Free">
          <description>Emits a tuple containing the reponse received from the server and assignments automatically forwarded from the input. Tuple structure must conform to the [HTTPResponse] type specified in this namespace. Additional attributes with corresponding input attributes will be forwarded before the POST request.</description>
        </outputPort>
      </primitiveOp>
      <primitiveOp language="Java" modelUriIndex="55" name="HTTPRequest" public="true">
        <description>Issue an HTTP request of the specified method for each input tuple. For method `NONE`, the request is suppressed. The URL and  method of the HTTP request either come from the input tuple using attributes specified by the `url` and `method` parameters or can be fixed using the `fixedUrl` and `fixedMethod` parameters. These parameters can be mixed, for example the URL can be fixed with `fixedUrl` while the method is set from each tuple using `method`.
Entity enclosing requests (POST/PUT/PATCH) require a content type. The content type is specified with `contenType` or `fixedContentType` parameter. The default is `application/json`. The message body of an entity enclosing request can be defined in two ways:
* Method POST: If the parameter `requestBodyAttribute` is defined and the value of the attribute is not empty, the value of the attribute is copied into the request body. Otherwise the names and values of the Request Attributes are used to generate the request form.
* Other Methods: If the parameter `requestBodyAttribute` is defined, the value of the attribute is copied into the request body.
The operator can append Url Arguments to the request line. This happens if:
* If parameter `requestUrlArgumentsAttribute` is specified and this attribute is not empty, the value of this attribute is copied as URL argument string and overwrites all other arguments. (all methods)
* In method GET: If parameter `requestAttributesAsUrlArguments` is true, all Request Attribute names and values are converted to URL query parameters.
The content of the request is dependent on the method type.
# GET
An HTTP GET request is made. If parameter `requestAttributesAsUrlArguments` is true, all request attributes are converted to URL query parameters. If parameter `requestUrlArgumentsAttribute` is specified and this attribute is not empty, this attribute is copied as URL argument string and overwrites all other arguments.
# POST
An HTTP POST request is made, any request attributes are set as the body of the request message if parameter `requestBodyAttribute` is not present or the value of the attribute is empty. The encoding of the request body takes the content type into account. If content type is `application/json`, a json body is generated from request attributes. If content type is `application/x-www-form-urlencoded`, a url-encoded body is generated from request attributes. For all other content types, the content of all request attributes is concatenated into the message body. If `requestBodyAttribute` attribute is not empty, the body of the request is copied from this attribute instead.
# PUT
An HTTP PUT request is made, the body of the request message is copied from `requestBodyAttribute` attribute.
# PATCH
An HTTP PATCH request is made, the body of the request message is copied from `requestBodyAttribute` attribute.
# OPTIONS
No message body is generated.
# HEAD
An HTTP HEAD request is made.
# DELETE
No message body is generated.
# TRACE
No message body is generated.
# NONE
No http request is generated but an output tuple is submitted if the output port is present and attributes are passed from input port to output port.
# Request Attributes
Attributes from the input tuple are request parameters except for:
* Any attribute specified by parameters `url`, `method`, `contentType`, `requestBodyAttribute` or `equestUrlArguments`.
* If parameter `requestAttributes` is set, all attributes of this parameter are considered a request attribute.
* If parameter `requestAttributes` has one empty element, no attributes are considered a request attribute.
# Http Authentication
The operator supports the following authentication methods: Basic, Digest, OAuth1a and OAuth2.0; see parameter `authenticationType`.
# Behavior in a consistent region
This operator cannot be used inside a consistent region.</description>
        <images>
          <image size="16" uriIndex="56"/>
          <image size="32" uriIndex="57"/>
        </images>
        <customLiterals name="com.ibm.streamsx.inet.http.HTTPMethod">
          <value name="OPTIONS"/>
          <value name="GET"/>
          <value name="HEAD"/>
          <value name="POST"/>
          <value name="PUT"/>
          <value name="PATCH"/>
          <value name="DELETE"/>
          <value name="TRACE"/>
          <value name="NONE"/>
        </customLiterals>
        <parameter expressionMode="Constant" name="vmArg" optional="true" type="rstring">
          <description>
Specifies command-line arguments that are passed to the Java virtual machine that the operator runs within.
</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="authenticationFile" optional="true" type="rstring">
          <description>Path to the properties file containing authentication information. Authentication file is recommended to be stored in the application_dir/etc directory. Path of this file can be absolute or relative, if relative path is specified then it is relative to the application directory. The content of this file depends on the `authenticationType`.
* If `authenticationType` is `STANDARD`: A valid line is composed from the authentication Scope (hostname or `ANY_HOST`, equal sign, user, colon, password. E.g.: ANY_HOST=user:passwd
* If `authenticationType` is `OAUTH1`: The authentication file must contain key/value pairs for the keys: `consumerKey`, `consumerSecret`, `accessToken` and `accessTokenSecret`.
* If `authenticationType` is `OAUTH2`: The authentication file must contain one key/value pair for key `accessToken=myAccessToken`.
The authentication file may contain one key/value pair for key `authMethod`.
See `http_request_auth.properties`, `http_request_oauth1.properties` and `http_request_oauth2.properties` in the toolkits etc directory for a sample of authentication properties.</description>
        </parameter>
        <parameter cardinality="-1" expressionMode="AttributeFree" name="authenticationProperties" optional="true" type="rstring">
          <description>Properties to override those in the authentication file.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="authenticationType" optional="true" type="rstring">
          <description>The type of used authentication method. Valid options are "STANDARD", "OAUTH1," and "OAUTH2". Default is "STANDARD". If "STANDARD" is selected, the authorization may be none, basic or digest authorization. If the server requires basic or digest authorization one of the parameters `authenticationFile` or `authenticationProperties` is required. If the "OAUTH1" option is selected, the requests will be singed using OAuth 1.0a If the "OAUTH2" option is selected, the requests will be singed using OAuth 2.0.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="connectionTimeout" optional="true" type="int32">
          <description>Set the connection timeout in milliseconds. If value is 0, the default connection timeout is used. Default is 0.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="Attribute" name="contentType" optional="true" type="rstring">
          <description>MIME content type of entity for `POST` and `PUT` requests. Only one of `contentType` and `fixedContentType` must be specified. Defaults to `application/json`.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="disableAutomaticRetries" optional="true" type="boolean">
          <description>Disables automatic request recovery and re-execution. Default is false</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="disableContentCompression" optional="true" type="boolean">
          <description>Disables automatic content decompression. Default is false</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="disableRedirectHandling" optional="true" type="boolean">
          <description>Disables automatic redirect handling. Default is false. This parameter must not be used together with parameter `redirectStrategy`</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="errorDiagnostics" optional="true" type="rstring">
          <description>Name of the attribute to populate the error diagnostics with. This string contains the diagnostics information when the program execution of the http operation throws an exception. This string is empty when a http response was received. The status line of the http response is issued in the `dataStatus` attribute.</description>
        </parameter>
        <parameter cardinality="-1" expressionMode="AttributeFree" name="extraHeaders" optional="true" type="rstring">
          <description>Extra headers to send with request, format is `Header-Name: value`.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="fixedContentType" optional="true" type="rstring">
          <description>Fixed MIME content type of entity for `POST` and `PUT` requests. Only one of `contentType` and `fixedContentType` must be specified. Defaults to `application/json`.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="CustomLiteral" name="fixedMethod" optional="true" type="com.ibm.streamsx.inet.http.HTTPMethod">
          <description>Fixed method for each HTTP request. Every HTTP request  uses the method provided. One and only one of `method` and `fixedMethod` must be specified.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="fixedUrl" optional="true" type="rstring">
          <description>Fixed URL to send HTTP requests to. Any tuple received on the input port results in a request to the URL provided (except for method NONE). One and only one of `url` and `fixedUrl` must be specified.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="Attribute" name="method" optional="true" type="rstring">
          <description>Attribute that specifies the method to be used in the HTTP request for a tuple. One and only one of `method` and `fixedMethod` must be specified.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="outputBody" optional="true" type="rstring">
          <description>Name of the attribute to populate the response body with. If this parameter is set, the operators returns one tuple for each request. Only one of `outputDataLine` and `outputBody` must be specified. This parameter is not allowed if the operator has no output port.If this parameter is set and parameter `outputBodyRaw` is set, all responses with entitiy mime type not equal to `application/octet-stream` or `default/binary` generate output here.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="outputBodyRaw" optional="true" type="rstring">
          <description>Name of the attribute to populate the raw response body with. The type of this attribute must be `blob`. Only one of `outputDataLine` and `outputBodyRaw` must be specified. This parameter is not allowed if the operator has no output port. You may use `outputBodyRaw` and `outputBody`.If this parameter is set and parameter `outputBody` is set, all responses with entitiy mime type equal to `application/octet-stream` or `default/binary` will generate output here.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="outputCharSet" optional="true" type="rstring">
          <description>Name of the attribute to populate the response entity charset with. This parameter is not allowed if the operator has no output port. </description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="outputContentEncoding" optional="true" type="rstring">
          <description>Name of the attribute to populate the response content encoding header with. This parameter is not allowed if the operator has no output port. </description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="outputContentType" optional="true" type="rstring">
          <description>Name of the attribute to populate the response entity mime type with. This parameter is not allowed if the operator has no output port. </description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="outputDataLine" optional="true" type="rstring">
          <description>Name of the attribute to populate one line of the response data with. If this parameter is set, the operators returns one tuple for each line in the response body but at least one tuple if the body is empty. Only one of `outputDataLine` and `outputBody` must be specified. This parameter is not allowed if the operator has no output port.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="outputHeader" optional="true" type="rstring">
          <description>Name of the attribute to populate the response header information with. The type of this attribute must be string list. This parameter is not allowed if the operator has no output port. </description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="outputStatus" optional="true" type="rstring">
          <description>Name of the attribute to populate the response status line with. This parameter is not allowed if the operator has no output port. </description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="outputStatusCode" optional="true" type="rstring">
          <description>Name of the attribute to populate the response status code as integer with. The type of this attribute must be int32. This is the numerical value from the http response or -1 if no response was received. This parameter is not allowed if the operator has no output port. </description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="proxy" optional="true" type="rstring">
          <description>Hostname of the http-proxy to be used. If this parameter is omitted no proxy is used.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="proxyPort" optional="true" type="int32">
          <description>The proxy-port to be used. Default value is 8080. This parameter is ignored if no `proxy` parameter is specified.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="redirectStrategy" optional="true" type="rstring">
          <description>Set the redirection strategy. Possible values are:
* DEFAULT: This enables the automatic redirect handling. This strategy honors the restrictions on automatic redirection of entity enclosing methods such as POST and PUT imposed by the HTTP specification. 302 Moved Temporarily, 301 Moved Permanently and 307 Temporary Redirect status codes will result in an automatic redirect of HEAD and GET methods only. POST and PUT methods will not be automatically redirected as requiring user confirmation.
* LAX: This relaxes the default settings and enables the automatic redirection of all HEAD, GET, POST, and DELETE requests.
* NONE: This disables the automatic redirection handling.
This parameter must not be used together with parameter `disableRedirectHandling`. Default is `DEFAULT`</description>
        </parameter>
        <parameter cardinality="-1" expressionMode="AttributeFree" name="requestAttributes" optional="true" type="rstring">
          <description>Names of the attributes which are part of the request body. The content of these attributes is sent as request body in method POST. If parameter `requestAttributesAsUrlArguments` is true, the request attributes are additionally appended as arguments to the url in method GET. If this parameter is missing, all attributes, excluding those that are used to specify the URL, method, content type, Request url arguments or request attributes, are used in the request body. One empty element defines an empty list which means no attributes are considered request attributes. </description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="requestAttributesAsUrlArguments" optional="true" type="boolean">
          <description>If this parameter is true, the request attributes are appended as arguments to the url in method GET. If this parameter is false, the request attributes are not appended to the url. Default is false. These arguments are overwritten from a non-empty value in parameter `requestUrlArgumentsAttribute`.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="Attribute" name="requestBodyAttribute" optional="true" type="rstring">
          <description>Request body attribute for any method that accepts an entity (PUT / POST / PATCH). In method PUT and PATCH the body of request is taken from this attribute. In method POST, any non-empty value overwrites the request attributes.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="Attribute" name="requestUrlArgumentsAttribute" optional="true" type="rstring">
          <description>Request url arguments attribute. If this parameter is set and the value of this attribute  is not empty, the content of this string is appended as arguments to the request url. This overwrites the arguments which are generated from the request attributes. The value is expected to be unescaped and may contain non-ASCII characters</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="sslAcceptAllCertificates" optional="true" type="boolean">
          <description>Accept all SSL certificates, even those that are self-signed. If this parameter is set, parameter `sslTrustStoreFile` is not allowed. Setting this option will allow potentially insecure connections. Default is false.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="sslTrustStoreFile" optional="true" type="rstring">
          <description>Path to .jks trust store file used for TODO: ?server? and client authentication. If this parameter is set, parameter `sslTrustStorePassword` is required.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="sslTrustStorePassword" optional="true" type="rstring">
          <description>Password for the trust store and the keys it contains</description>
        </parameter>
        <parameter cardinality="1" expressionMode="Attribute" name="url" optional="true" type="rstring">
          <description>Attribute that specifies the URL to be used in the HTTP request for a tuple. One and only one of `url` and `fixedUrl` must be specified.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="userAgent" optional="true" type="rstring">
          <description>Assigns the header User-Agent value. Default is "Apache-HttpClient/4.5.5 (Java/1.8.0)"</description>
        </parameter>
        <inputPort maxNumPorts="1" minNumPorts="1" optional="false" windowPunctInputMode="Oblivious">
          <description>This stream contains the information sent in a http request. Each tuple with valid request data results in an HTTP request except if method `NONE` is specified.</description>
          <windowPolicy>NonWindowed</windowPolicy>
        </inputPort>
        <outputPort expressionMode="Nonexistent" maxNumPorts="1" minNumPorts="1" optional="true" windowPunctOutputMode="Preserving">
          <description>Data received in the http response be sent on this port. Other attributes are assigned from input stream.</description>
        </outputPort>
      </primitiveOp>
      <compositeOp column="18" line="44" name="HTTPParallelRequest" potentialMain="false" public="true" uriIndex="2">
        <parameter metaType="Expression" name="method" optional="false" type="&lt;HttpMethod>"/>
        <parameter metaType="Attribute" name="url" optional="false"/>
        <parameter defaultValue="urlEncode" metaType="Function" name="urlEncode" optional="true"/>
        <parameter defaultValue="&quot;&quot;" metaType="Expression" name="data" optional="true" type="&lt;rstring>"/>
        <parameter defaultValue="[]" metaType="Expression" name="headers" optional="true" type="&lt;list&lt;rstring>>"/>
        <parameter defaultValue="&quot;Content-Type: application/x-www-form-urlencoded&quot;" metaType="Expression" name="contentTypeHeader" optional="true" type="&lt;rstring>"/>
        <parameter defaultValue="5" metaType="Expression" name="requestTimeout" optional="true" type="&lt;int32>"/>
        <parameter defaultValue="120" metaType="Expression" name="connectionTimeout" optional="true" type="&lt;int32>"/>
        <parameter defaultValue="8" metaType="Expression" name="width" optional="true" type="&lt;int32>"/>
        <parameter defaultValue="100" metaType="Expression" name="queue" optional="true" type="&lt;int32>"/>
        <parameter defaultValue="Sys.Wait" metaType="Expression" name="congestionPolicy" optional="true" type="&lt;Sys.CongestionPolicy>"/>
        <parameter defaultValue="&quot;&quot;" metaType="Expression" name="user" optional="true" type="&lt;rstring>"/>
        <parameter defaultValue="&quot;&quot;" metaType="Expression" name="password" optional="true" type="&lt;rstring>"/>
        <parameter defaultValue="&quot;&quot;" metaType="Expression" name="certFile" optional="true" type="&lt;rstring>"/>
        <parameter defaultValue="&quot;&quot;" metaType="Expression" name="certType" optional="true" type="&lt;rstring>"/>
        <parameter defaultValue="&quot;&quot;" metaType="Expression" name="keyFile" optional="true" type="&lt;rstring>"/>
        <parameter defaultValue="&quot;&quot;" metaType="Expression" name="keyType" optional="true" type="&lt;rstring>"/>
        <parameter defaultValue="&quot;&quot;" metaType="Expression" name="keyPass" optional="true" type="&lt;rstring>"/>
        <inputPort name="Request" portIndex="0"/>
        <outputPort name="Result" portIndex="0"/>
        <outputPort name="Error" portIndex="1"/>
        <type column="10" line="70" name="HttpMethod" static="true" type="enum { httpGet, httpPut, httpPost, httpDelete }" uriIndex="2"/>
        <enumLiterals column="29" line="70" static="true" typeName="HttpMethod" uriIndex="2">
          <enum>httpGet</enum>
          <enum>httpPut</enum>
          <enum>httpPost</enum>
          <enum>httpDelete</enum>
        </enumLiterals>
      </compositeOp>
      <function modelUriIndex="42" name="httpGet" native="true" public="true" returnType="rstring" uriIndex="0">
        <description>
HTTP GET on the given url, using the username and password, if present. It follows redirects.
If there is an error, a non-zero is returned by error. Errorcodes see in [https://curl.haxx.se/libcurl/c/libcurl-errors.html]
@param	url					the url to get
@param	extraHeaders		if this list is not emtpy, the list is passed to the server as HTTP Headers
@param	user				if this string is not empty, this user name is passed to to the server
@param	password			if this string is not empty, this password is passed to the server
@param	error				the returned error code
@return	the received http message body
        </description>
        <prototype>public rstring httpGet(rstring url,list&lt;rstring&gt; extraHeaders, rstring user, rstring password, mutable int32 error)</prototype>
        <parameter name="url" type="rstring"/>
        <parameter name="extraHeaders" type="list&lt;rstring>"/>
        <parameter name="user" type="rstring"/>
        <parameter name="password" type="rstring"/>
        <parameter mutable="true" name="error" type="int32"/>
      </function>
      <function modelUriIndex="42" name="httpGet" native="true" public="true" returnType="rstring" uriIndex="0">
        <description>
HTTP GET on the given url, using the username and password, if present. It follows redirects. Received header information are provided in headers parameter.
If there is an error, a non-zero is returned by error. Errorcodes see in [https://curl.haxx.se/libcurl/c/libcurl-errors.html]
@param	url					the url to get
@param	extraHeaders		if this list is not emtpy, the list is passed to the server as HTTP Headers
@param	user				if this string is not empty, this user name is passed to to the server
@param	password			if this string is not empty, this password is passed to the server
@param	headers				the returned header data
@param	error				the returned error code
@return	the received http message body
        </description>
        <prototype>public rstring httpGet(rstring url,list&lt;rstring&gt; extraHeaders, rstring user, rstring password, mutable list&lt;rstring&gt; headers, mutable int32 error)</prototype>
        <parameter name="url" type="rstring"/>
        <parameter name="extraHeaders" type="list&lt;rstring>"/>
        <parameter name="user" type="rstring"/>
        <parameter name="password" type="rstring"/>
        <parameter mutable="true" name="headers" type="list&lt;rstring>"/>
        <parameter mutable="true" name="error" type="int32"/>
      </function>
      <function modelUriIndex="42" name="httpGet" native="true" public="true" returnType="rstring" uriIndex="0">
        <description>
HTTP GET on the given url, using the username and password, if present. It follows redirects.
If there is an error, a non-zero is returned by error. Errorcodes see in [https://curl.haxx.se/libcurl/c/libcurl-errors.html]
@param	url					the url to get
@param	extraHeaders		if this list is not emtpy, the list is passed to the server as HTTP Headers
@param	user				if this string is not empty, this user name is passed to to the server
@param	password			if this string is not empty, this password is passed to the server
@param	error				the returned error code
@param	requestTimeout		This is the maximum time in seconds that you allow the libcurl transfer operation to take. Normally, name lookups can take a considerable time
and limiting operations to less than a few minutes risk aborting perfectly normal operations. Default timeout is 0 (zero) which means it never times out.
@param	connectionTimeout	This is the maximum time in seconds that you allow the connection to the server to take. This only limits the connection phase, once it has connected, this option is of no more use. Set to zero to switch to the default built-in connection timeout - 120 seconds.
@return	the received http message body
        </description>
        <prototype>public rstring httpGet(rstring url,list&lt;rstring&gt; extraHeaders, rstring user, rstring password, mutable int32 error, int32 requestTimeout, int32 connectionTimeout)</prototype>
        <parameter name="url" type="rstring"/>
        <parameter name="extraHeaders" type="list&lt;rstring>"/>
        <parameter name="user" type="rstring"/>
        <parameter name="password" type="rstring"/>
        <parameter mutable="true" name="error" type="int32"/>
        <parameter name="requestTimeout" type="int32"/>
        <parameter name="connectionTimeout" type="int32"/>
      </function>
      <function modelUriIndex="42" name="httpGet" native="true" public="true" returnType="rstring" uriIndex="0">
        <description>
HTTP GET on the given url, using the username and password, if present, and using certificates/private keys. It follows redirects. Received header information are provided in headers parameter.
If there is an error, a non-zero is returned by error. Errorcodes see in [https://curl.haxx.se/libcurl/c/libcurl-errors.html].  Note: Certificate and key file types of P12 are supported only if libcurl is compiled with OpenSSL (run curl --version to see which library is supported).
@param	url					the url to get
@param	extraHeaders		if this list is not emtpy, the list is passed to the server as HTTP Headers
@param	user				if this string is not empty, this user name is passed to to the server
@param	password			if this string is not empty, this password is passed to the server
@param  certFile			if this string is not empty, this is the absolute path to a certificate file sent to the server
@param  certType		        if this string is not empty, this is the cert file type (PEM, P12)
@param  keyFile             if this string is not empty, this is the absolute path to a private key file to be sent to the server
@param  keyType             if this string is not empty, this is the key file type (PEM, P12)
@param  keyPass		        if this string is not empty, this is the password for the private key and certificate file
@param	headers				the returned header data
@param	error				the returned error code
@param	requestTimeout		This is the maximum time in seconds that you allow the libcurl transfer operation to take. Normally, name lookups can take a considerable time
and limiting operations to less than a few minutes risk aborting perfectly normal operations. Default timeout is 0 (zero) which means it never times out.
@param	connectionTimeout	This is the maximum time in seconds that you allow the connection to the server to take. This only limits the connection phase, once it has connected, this option is of no more use. Set to zero to switch to the default built-in connection timeout - 120 seconds.
@return	the received http message body
        </description>
        <prototype>public rstring httpGet(rstring url,list&lt;rstring&gt; extraHeaders, rstring user, rstring password, rstring certFile, rstring certType, rstring keyFile, rstring keyType, rstring keyPass, mutable list&lt;rstring&gt; headers, mutable int32 error, int32 requestTimeout, int32 connectionTimeout)</prototype>
        <parameter name="url" type="rstring"/>
        <parameter name="extraHeaders" type="list&lt;rstring>"/>
        <parameter name="user" type="rstring"/>
        <parameter name="password" type="rstring"/>
        <parameter name="certFile" type="rstring"/>
        <parameter name="certType" type="rstring"/>
        <parameter name="keyFile" type="rstring"/>
        <parameter name="keyType" type="rstring"/>
        <parameter name="keyPass" type="rstring"/>
        <parameter mutable="true" name="headers" type="list&lt;rstring>"/>
        <parameter mutable="true" name="error" type="int32"/>
        <parameter name="requestTimeout" type="int32"/>
        <parameter name="connectionTimeout" type="int32"/>
      </function>
      <function modelUriIndex="42" name="httpGet" native="true" public="true" returnType="rstring" uriIndex="0">
        <description>
HTTP GET on the given url, using the username and password, if present. It follows redirects. Received header information are provided in headers parameter.
If there is an error, a non-zero is returned by error. Errorcodes see in [https://curl.haxx.se/libcurl/c/libcurl-errors.html]
@param	url					the url to get
@param	extraHeaders		if this list is not emtpy, the list is passed to the server as HTTP Headers
@param	user				if this string is not empty, this user name is passed to to the server
@param	password			if this string is not empty, this password is passed to the server
@param	headers				the returned header data
@param	error				the returned error code
@param	requestTimeout		This is the maximum time in seconds that you allow the libcurl transfer operation to take. Normally, name lookups can take a considerable time
and limiting operations to less than a few minutes risk aborting perfectly normal operations. Default timeout is 0 (zero) which means it never times out.
@param	connectionTimeout	This is the maximum time in seconds that you allow the connection to the server to take. This only limits the connection phase, once it has connected, this option is of no more use. Set to zero to switch to the default built-in connection timeout - 120 seconds.
@return	the received http message body
        </description>
        <prototype>public rstring httpGet(rstring url,list&lt;rstring&gt; extraHeaders, rstring user, rstring password, mutable list&lt;rstring&gt; headers, mutable int32 error, int32 requestTimeout, int32 connectionTimeout)</prototype>
        <parameter name="url" type="rstring"/>
        <parameter name="extraHeaders" type="list&lt;rstring>"/>
        <parameter name="user" type="rstring"/>
        <parameter name="password" type="rstring"/>
        <parameter mutable="true" name="headers" type="list&lt;rstring>"/>
        <parameter mutable="true" name="error" type="int32"/>
        <parameter name="requestTimeout" type="int32"/>
        <parameter name="connectionTimeout" type="int32"/>
      </function>
      <function modelUriIndex="42" name="httpDelete" native="true" public="true" returnType="rstring" uriIndex="0">
        <description>
HTTP DELETE on the given url, using the username and password, if present. It follows redirects.
If there is an error, a non-zero is returned by error. Errorcodes see in [https://curl.haxx.se/libcurl/c/libcurl-errors.html]
@param	url					the url to delete
@param	extraHeaders		if this list is not emtpy, the list is passed to the server as HTTP Headers
@param	user				if this string is not empty, this user name is passed to to the server
@param	password			if this string is not empty, this password is passed to the server
@param	error				the returned error code
@return	the received http message body
        </description>
        <prototype>public rstring httpDelete(rstring url,list&lt;rstring&gt; extraHeaders, rstring user, rstring password, mutable int32 error)</prototype>
        <parameter name="url" type="rstring"/>
        <parameter name="extraHeaders" type="list&lt;rstring>"/>
        <parameter name="user" type="rstring"/>
        <parameter name="password" type="rstring"/>
        <parameter mutable="true" name="error" type="int32"/>
      </function>
      <function modelUriIndex="42" name="httpDelete" native="true" public="true" returnType="rstring" uriIndex="0">
        <description>
HTTP DELETE on the given url, using the username and password, if present. It follows redirects.
If there is an error, a non-zero is returned by error. Errorcodes see in [https://curl.haxx.se/libcurl/c/libcurl-errors.html]
@param	url					the url to delete
@param	extraHeaders		if this list is not emtpy, the list is passed to the server as HTTP Headers
@param	user				if this string is not empty, this user name is passed to to the server
@param	password			if this string is not empty, this password is passed to the server
@param	error				the returned error code
@param	requestTimeout		This is the maximum time in seconds that you allow the libcurl transfer operation to take. Normally, name lookups can take a considerable time
and limiting operations to less than a few minutes risk aborting perfectly normal operations. Default timeout is 0 (zero) which means it never times out.
@param	connectionTimeout	This is the maximum time in seconds that you allow the connection to the server to take. This only limits the connection phase, once it has connected, this option is of no more use. Set to zero to switch to the default built-in connection timeout - 120 seconds.
@return	the received http message body
        </description>
        <prototype>public rstring httpDelete(rstring url,list&lt;rstring&gt; extraHeaders, rstring user, rstring password, mutable int32 error, int32 requestTimeout, int32 connectionTimeout)</prototype>
        <parameter name="url" type="rstring"/>
        <parameter name="extraHeaders" type="list&lt;rstring>"/>
        <parameter name="user" type="rstring"/>
        <parameter name="password" type="rstring"/>
        <parameter mutable="true" name="error" type="int32"/>
        <parameter name="requestTimeout" type="int32"/>
        <parameter name="connectionTimeout" type="int32"/>
      </function>
      <function modelUriIndex="42" name="httpDelete" native="true" public="true" returnType="rstring" uriIndex="0">
        <description>
HTTP DELETE on the given url, using the username and password, if present and certificates. It follows redirects.
If there is an error, a non-zero is returned by error. Errorcodes see in [https://curl.haxx.se/libcurl/c/libcurl-errors.html]. Certificate/Key type of P12 requires libcurl to be compiled with OpenSSL.
@param	url					the url to delete
@param	extraHeaders		if this list is not emtpy, the list is passed to the server as HTTP Headers
@param	user				if this string is not empty, this user name is passed to to the server
@param	password			if this string is not empty, this password is passed to the server
@param  certFile			if this string is not empty, this is the absolute path to a certificate file sent to the server
@param  certType		        if this string is not empty, this is the cert file type (PEM, P12)
@param  keyFile             if this string is not empty, this is the absolute path to a private key file to be sent to the server
@param  keyType             if this string is not empty, this is the key file type (PEM, P12)
@param  keyPass		        if this string is not empty, this is the password for the private key
@param	error				the returned error code
@param	requestTimeout		This is the maximum time in seconds that you allow the libcurl transfer operation to take. Normally, name lookups can take a considerable time
and limiting operations to less than a few minutes risk aborting perfectly normal operations. Default timeout is 0 (zero) which means it never times out.
@param	connectionTimeout	This is the maximum time in seconds that you allow the connection to the server to take. This only limits the connection phase, once it has connected, this option is of no more use. Set to zero to switch to the default built-in connection timeout - 120 seconds.
@return	the received http message body
        </description>
        <prototype>public rstring httpDelete(rstring url,list&lt;rstring&gt; extraHeaders, rstring user, rstring password, rstring certFile, rstring certType, rstring keyFile, rstring keyType, rstring keyPass, mutable int32 error, int32 requestTimeout, int32 connectionTimeout)</prototype>
        <parameter name="url" type="rstring"/>
        <parameter name="extraHeaders" type="list&lt;rstring>"/>
        <parameter name="user" type="rstring"/>
        <parameter name="password" type="rstring"/>
        <parameter name="certFile" type="rstring"/>
        <parameter name="certType" type="rstring"/>
        <parameter name="keyFile" type="rstring"/>
        <parameter name="keyType" type="rstring"/>
        <parameter name="keyPass" type="rstring"/>
        <parameter mutable="true" name="error" type="int32"/>
        <parameter name="requestTimeout" type="int32"/>
        <parameter name="connectionTimeout" type="int32"/>
      </function>
      <function modelUriIndex="42" name="httpPut" native="true" public="true" returnType="rstring" uriIndex="0">
        <description>
HTTP PUT data to the given url using the username and password given if not empty. Does not follow redirects. Headers are returned in the headers list, error is set to a non-zero if there is an error, and the result of the PUT is returned in the rstring.
Errorcodes see in [https://curl.haxx.se/libcurl/c/libcurl-errors.html]
@param	data				the content to put
@param	url					the url to put
@param	extraHeaders		if this list is not emtpy, the list is passed to the server as HTTP Headers
@param	username			if this string is not empty, this user name is passed to to the server
@param	password			if this string is not empty, this password is passed to the server
@param	headers				the returned header data
@param	error				the returned error code
@return	the received http message body
        </description>
        <prototype>public rstring httpPut(rstring data, rstring url, list&lt;rstring&gt; extraHeaders, rstring username, rstring password, mutable list&lt;rstring&gt; headers, mutable int32 error)</prototype>
        <parameter name="data" type="rstring"/>
        <parameter name="url" type="rstring"/>
        <parameter name="extraHeaders" type="list&lt;rstring>"/>
        <parameter name="username" type="rstring"/>
        <parameter name="password" type="rstring"/>
        <parameter mutable="true" name="headers" type="list&lt;rstring>"/>
        <parameter mutable="true" name="error" type="int32"/>
      </function>
      <function modelUriIndex="42" name="httpPut" native="true" public="true" returnType="rstring" uriIndex="0">
        <description>
HTTP PUT data to the given url using the username and password given if not empty. Does not follow redirects. Headers are returned in the headers list, error is set to a non-zero if there is an error, and the result of the PUT is returned in the rstring.
Errorcodes see in [https://curl.haxx.se/libcurl/c/libcurl-errors.html]
@param	data				the content to put
@param	url					the url to put
@param	extraHeaders		if this list is not emtpy, the list is passed to the server as HTTP Headers
@param	username			if this string is not empty, this user name is passed to to the server
@param	password			if this string is not empty, this password is passed to the server
@param	headers				the returned header data
@param	error				the returned error code
@param	requestTimeout		This is the maximum time in seconds that you allow the libcurl transfer operation to take. Normally, name lookups can take a considerable time
and limiting operations to less than a few minutes risk aborting perfectly normal operations. Default timeout is 0 (zero) which means it never times out.
@param	connectionTimeout	This is the maximum time in seconds that you allow the connection to the server to take. This only limits the connection phase, once it has connected, this option is of no more use. Set to zero to switch to the default built-in connection timeout - 120 seconds.
@return	the received http message body
        </description>
        <prototype>public rstring httpPut(rstring data, rstring url, list&lt;rstring&gt; extraHeaders, rstring username, rstring password, mutable list&lt;rstring&gt; headers, mutable int32 error, int32 requestTimeout, int32 connectionTimeout)</prototype>
        <parameter name="data" type="rstring"/>
        <parameter name="url" type="rstring"/>
        <parameter name="extraHeaders" type="list&lt;rstring>"/>
        <parameter name="username" type="rstring"/>
        <parameter name="password" type="rstring"/>
        <parameter mutable="true" name="headers" type="list&lt;rstring>"/>
        <parameter mutable="true" name="error" type="int32"/>
        <parameter name="requestTimeout" type="int32"/>
        <parameter name="connectionTimeout" type="int32"/>
      </function>
      <function modelUriIndex="42" name="httpPut" native="true" public="true" returnType="rstring" uriIndex="0">
        <description>
HTTP PUT data to the given url using the username and password given if not empty. Does not follow redirects. Headers are returned in the headers list, error is set to a non-zero if there is an error, and the result of the PUT is returned in the rstring.
Errorcodes see in [https://curl.haxx.se/libcurl/c/libcurl-errors.html]
@param	data				the content to put
@param	url					the url to put
@param	extraHeaders		if this list is not emtpy, the list is passed to the server as HTTP Headers
@param	username			if this string is not empty, this user name is passed to to the server
@param	password			if this string is not empty, this password is passed to the server
@param  certFile			if this string is not empty, this is the absolute path to a certificate file sent to the server
@param  certType		        if this string is not empty, this is the cert file type (PEM, P12)
@param  keyFile             if this string is not empty, this is the absolute path to a private key file to be sent to the server
@param  keyType             if this string is not empty, this is the key file type (PEM, P12)
@param  keyPass		        if this string is not empty, this is the password for the private key
@param	headers				the returned header data
@param	error				the returned error code
@param	requestTimeout		This is the maximum time in seconds that you allow the libcurl transfer operation to take. Normally, name lookups can take a considerable time
and limiting operations to less than a few minutes risk aborting perfectly normal operations. Default timeout is 0 (zero) which means it never times out.
@param	connectionTimeout	This is the maximum time in seconds that you allow the connection to the server to take. This only limits the connection phase, once it has connected, this option is of no more use. Set to zero to switch to the default built-in connection timeout - 120 seconds.
@return	the received http message body
        </description>
        <prototype>public rstring httpPut(rstring data, rstring url, list&lt;rstring&gt; extraHeaders, rstring username, rstring password, rstring certFile, rstring certType, rstring keyFile, rstring keyType, rstring keyPass, mutable list&lt;rstring&gt; headers, mutable int32 error, int32 requestTimeout, int32 connectionTimeout)</prototype>
        <parameter name="data" type="rstring"/>
        <parameter name="url" type="rstring"/>
        <parameter name="extraHeaders" type="list&lt;rstring>"/>
        <parameter name="username" type="rstring"/>
        <parameter name="password" type="rstring"/>
        <parameter name="certFile" type="rstring"/>
        <parameter name="certType" type="rstring"/>
        <parameter name="keyFile" type="rstring"/>
        <parameter name="keyType" type="rstring"/>
        <parameter name="keyPass" type="rstring"/>
        <parameter mutable="true" name="headers" type="list&lt;rstring>"/>
        <parameter mutable="true" name="error" type="int32"/>
        <parameter name="requestTimeout" type="int32"/>
        <parameter name="connectionTimeout" type="int32"/>
      </function>
      <function modelUriIndex="42" name="httpPost" native="true" public="true" returnType="rstring" uriIndex="0">
        <description>
HTTP POST data to the given url using the username and password (if non-empty). Does not follow redirects. Headers are returned in the headers list.
Error is set to non-zero if there is an error.  The result of the POST is returned as an rstring.
Errorcodes see in [https://curl.haxx.se/libcurl/c/libcurl-errors.html]
@param	data				the content to post
@param	url					the url to post
@param	extraHeaders		if this list is not emtpy, the list is passed to the server as HTTP Headers
@param	username			if this string is not empty, this user name is passed to to the server
@param	password			if this string is not empty, this password is passed to the server
@param	headers				the returned header data
@param	error				the returned error code
@return	the received http message body
        </description>
        <prototype>public rstring httpPost(rstring data, rstring url, list&lt;rstring&gt; extraHeaders, rstring username, rstring password, mutable list&lt;rstring&gt; headers, mutable int32 error)</prototype>
        <parameter name="data" type="rstring"/>
        <parameter name="url" type="rstring"/>
        <parameter name="extraHeaders" type="list&lt;rstring>"/>
        <parameter name="username" type="rstring"/>
        <parameter name="password" type="rstring"/>
        <parameter mutable="true" name="headers" type="list&lt;rstring>"/>
        <parameter mutable="true" name="error" type="int32"/>
      </function>
      <function modelUriIndex="42" name="httpPost" native="true" public="true" returnType="rstring" uriIndex="0">
        <description>
HTTP POST data to the given url using the username and password (if non-empty). Does not follow redirects. Headers are returned in the headers list.
Error is set to non-zero if there is an error.  The result of the POST is returned as an rstring.
Errorcodes see in [https://curl.haxx.se/libcurl/c/libcurl-errors.html]
@param	data				the content to post
@param	url					the url to post
@param	extraHeaders		if this list is not emtpy, the list is passed to the server as HTTP Headers
@param	username			if this string is not empty, this user name is passed to to the server
@param	password			if this string is not empty, this password is passed to the server
@param	headers				the returned header data
@param	error				the returned error code
@param	requestTimeout		This is the maximum time in seconds that you allow the libcurl transfer operation to take. Normally, name lookups can take a considerable time
and limiting operations to less than a few minutes risk aborting perfectly normal operations. Default timeout is 0 (zero) which means it never times out.
@param	connectionTimeout	This is the maximum time in seconds that you allow the connection to the server to take. This only limits the connection phase, once it has connected, this option is of no more use. Set to zero to switch to the default built-in connection timeout - 120 seconds.
@return	the received http message body
        </description>
        <prototype>public rstring httpPost(rstring data, rstring url, list&lt;rstring&gt; extraHeaders, rstring username, rstring password, mutable list&lt;rstring&gt; headers, mutable int32 error, int32 requestTimeout, int32 connectionTimeout)</prototype>
        <parameter name="data" type="rstring"/>
        <parameter name="url" type="rstring"/>
        <parameter name="extraHeaders" type="list&lt;rstring>"/>
        <parameter name="username" type="rstring"/>
        <parameter name="password" type="rstring"/>
        <parameter mutable="true" name="headers" type="list&lt;rstring>"/>
        <parameter mutable="true" name="error" type="int32"/>
        <parameter name="requestTimeout" type="int32"/>
        <parameter name="connectionTimeout" type="int32"/>
      </function>
      <function modelUriIndex="42" name="httpPost" native="true" public="true" returnType="rstring" uriIndex="0">
        <description>
HTTP POST data to the given url using the username and password (if non-empty). Uses certificates and private key for SSL. Does not follow redirects. Headers are returned in the headers list.
Error is set to non-zero if there is an error.  The result of the POST is returned as an rstring.
Errorcodes see in [https://curl.haxx.se/libcurl/c/libcurl-errors.html]
@param	data				the content to post
@param	url					the url to post
@param	extraHeaders		if this list is not emtpy, the list is passed to the server as HTTP Headers
@param	username			if this string is not empty, this user name is passed to to the server
@param	password			if this string is not empty, this password is passed to the server
@param  certFile			if this string is not empty, this is the absolute path to a certificate file sent to the server
@param  certType		        if this string is not empty, this is the cert file type (PEM, P12)
@param  keyFile             if this string is not empty, this is the absolute path to a private key file to be sent to the server
@param  keyType             if this string is not empty, this is the key file type (PEM, P12)
@param  keyPass		        if this string is not empty, this is the password for the private key
@param	headers				the returned header data
@param	error				the returned error code
@param	requestTimeout		This is the maximum time in seconds that you allow the libcurl transfer operation to take. Normally, name lookups can take a considerable time
and limiting operations to less than a few minutes risk aborting perfectly normal operations. Default timeout is 0 (zero) which means it never times out.
@param	connectionTimeout	This is the maximum time in seconds that you allow the connection to the server to take. This only limits the connection phase, once it has connected, this option is of no more use. Set to zero to switch to the default built-in connection timeout - 120 seconds.
@return	the received http message body
        </description>
        <prototype>public rstring httpPost(rstring data, rstring url, list&lt;rstring&gt; extraHeaders, rstring username, rstring password, rstring certFile, rstring certType, rstring keyFile, rstring keyType, rstring keyPass, mutable list&lt;rstring&gt; headers, mutable int32 error, int32 requestTimeout, int32 connectionTimeout)</prototype>
        <parameter name="data" type="rstring"/>
        <parameter name="url" type="rstring"/>
        <parameter name="extraHeaders" type="list&lt;rstring>"/>
        <parameter name="username" type="rstring"/>
        <parameter name="password" type="rstring"/>
        <parameter name="certFile" type="rstring"/>
        <parameter name="certType" type="rstring"/>
        <parameter name="keyFile" type="rstring"/>
        <parameter name="keyType" type="rstring"/>
        <parameter name="keyPass" type="rstring"/>
        <parameter mutable="true" name="headers" type="list&lt;rstring>"/>
        <parameter mutable="true" name="error" type="int32"/>
        <parameter name="requestTimeout" type="int32"/>
        <parameter name="connectionTimeout" type="int32"/>
      </function>
      <function modelUriIndex="42" name="urlDecode" native="true" public="true" returnType="rstring" uriIndex="0">
        <description>Decode a URL encoded rstring.</description>
        <prototype>public rstring urlDecode(rstring decode)</prototype>
        <parameter name="decode" type="rstring"/>
      </function>
      <function modelUriIndex="42" name="urlEncode" native="true" public="true" returnType="rstring" uriIndex="0">
        <description>URL encode the given rstring.</description>
        <prototype>public rstring urlEncode(rstring raw)</prototype>
        <parameter name="raw" type="rstring"/>
      </function>
      <function column="1" line="142" name="passThrough" native="false" public="true" returnType="rstring" uriIndex="2">
        <prototype>public rstring passThrough(rstring val)</prototype>
        <parameter name="val" type="rstring"/>
      </function>
      <type column="6" line="10" name="HTTPResponse" static="true" type="rstring data, rstring errorMessage, int32 responseCode, int32 dataSize" uriIndex="3"/>
    </namespace>
    <namespace name="com.ibm.streamsx.inet.ftp">
      <primitiveOp language="Cpp" modelUriIndex="58" name="FTPCommand" public="true">
        <description docHref="doc/${nl}/spldoc/html/tk$com.ibm.streamsx.inet/op$com.ibm.streamsx.inet.ftp$FTPCommand.html">
The `FTPCommand` operator can run an **ftp** command at a remote host by using the FTP, FTPS, or SFTP protocols.
Possible commands are: **none**, **del**, **rm**, **rmdir**, **mkdir**, **rename**, **modificationTime**, and **pwd**.
The **modificationTime** is not possible in the SFTP protocol.
The command string and the command arguments are received from port 0.

The FTPCommand operator must not be used inside a consistent region!
      </description>
        <images>
          <image size="16" uriIndex="59"/>
          <image size="32" uriIndex="60"/>
        </images>
        <customLiterals name="CommandLiteral">
          <value name="del"/>
          <value name="mkdir"/>
          <value name="rename"/>
          <value name="modificationTime"/>
          <value name="pwd"/>
        </customLiterals>
        <outputFunctions name="GetData">
          <function name="Result" returnType="rstring">
            <description>Get the command result string</description>
            <prototype>rstring Result()</prototype>
          </function>
          <function name="Success" returnType="boolean">
            <description>Get the command success indication.</description>
            <prototype>boolean Success()</prototype>
          </function>
          <function name="Url" returnType="rstring">
            <description>This function returns a string with the url including schema.</description>
            <prototype>rstring Url()</prototype>
          </function>
          <function name="NoCommands" returnType="uint32">
            <description>Deprecated: Get the number of executed ftp commands(in case of rename only one is counted). Use function CommandCount() instead.</description>
            <prototype>uint32 NoCommands()</prototype>
          </function>
          <function name="CommandCount" returnType="uint32">
            <description>Get the number of executed ftp commands(in case of rename only one is counted)</description>
            <prototype>uint32 CommandCount()</prototype>
          </function>
          <function name="NoFailures" returnType="uint32">
            <description>Deprecated: Get the number of failed ftp commands. Use function CommandFailureCount() instead.</description>
            <prototype>uint32 NoFailures()</prototype>
          </function>
          <function name="CommandFailureCount" returnType="uint32">
            <description>Get the number of failed ftp commands</description>
            <prototype>uint32 CommandFailureCount()</prototype>
          </function>
          <function name="AsIs" returnType="T">
            <description>Return the argument unchanged.</description>
            <prototype>&lt;any T&gt; T AsIs(T)</prototype>
            <parameter name="__p1" type="T"/>
          </function>
        </outputFunctions>
        <outputFunctions name="GetError">
          <function name="Error" returnType="int32">
            <description>Deprecated: Get the error number. Use function ErrorCode() instead.</description>
            <prototype>int32 Error()</prototype>
          </function>
          <function name="ErrorCode" returnType="int32">
            <description>Get the error number</description>
            <prototype>int32 ErrorCode()</prototype>
          </function>
          <function name="ErrorText" returnType="rstring">
            <description>Get the error description</description>
            <prototype>rstring ErrorText()</prototype>
          </function>
          <function name="Url" returnType="rstring">
            <description>This function returns a string with the url including schema.</description>
            <prototype>rstring Url()</prototype>
          </function>
          <function name="NoTransfers" returnType="uint32">
            <description>Deprecated: Get the number of executed ftp commands(in case of rename only one is counted). Use function CommandCount() instead.</description>
            <prototype>uint32 NoTransfers()</prototype>
          </function>
          <function name="CommandCount" returnType="uint32">
            <description>Get the number of executed ftp commands(in case of rename only one is counted)</description>
            <prototype>uint32 CommandCount()</prototype>
          </function>
          <function name="NoTransferFailures" returnType="uint32">
            <description>Deprecated: Get the number of failed ftp commands. Use function CommandFailureCount() instead.</description>
            <prototype>uint32 NoTransferFailures()</prototype>
          </function>
          <function name="CommandFailureCount" returnType="uint32">
            <description>Get the number of failed ftp commands</description>
            <prototype>uint32 CommandFailureCount()</prototype>
          </function>
          <function name="AsIs" returnType="T">
            <description>Return the argument unchanged.</description>
            <prototype>&lt;any T&gt; T AsIs(T)</prototype>
            <parameter name="__p1" type="T"/>
          </function>
        </outputFunctions>
        <parameter cardinality="1" expressionMode="AttributeFree" name="protocol" optional="false" type="enum{ftp,ftpSSLAll,ftpSSLControl,ftpSSLTry,ftps,sftp}">
          <description>Protocol and encryption properties of the connection. This parameter takes one value of type [Protocol]</description>
        </parameter>
        <parameter cardinality="1" expressionMode="Expression" name="command" optional="false" type="rstring">
          <description>the command to be executed</description>
          <portScope>0</portScope>
        </parameter>
        <parameter cardinality="1" expressionMode="Expression" name="host" optional="false" type="rstring">
          <description>Hostname or IP address of the remote host in form hostname\[:port\].</description>
          <portScope>0</portScope>
        </parameter>
        <parameter cardinality="1" expressionMode="Expression" name="path" optional="false" type="rstring">
          <description>
The path of the remote directory where the command is executed. The parameter must end with a '/'.
The path should begin with '/'. In case of ftp protocols the path is relative to the home directory of the user and may depend on the server configuration. In case of ftp protocol an absolute path must start with '//'.
In case of sftp the path is an absolute path. A path relative to users home directory may be entered in the form '~/'.
        </description>
          <portScope>0</portScope>
        </parameter>
        <parameter cardinality="1" expressionMode="Expression" name="username" optional="false" type="rstring">
          <description>The ftp username. If the operator has two input ports and this parameter is an attribute parameter it must be supplied from the second input port.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="Expression" name="password" optional="true" type="rstring">
          <description>The password for the ftp user. If the operator has two input ports and this parameter is an attribute parameter it must be supplied from the second input port.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="Expression" name="filename" optional="true" type="rstring">
          <description>The command argument / may be empty for pwd</description>
          <portScope>0</portScope>
        </parameter>
        <parameter cardinality="1" expressionMode="Expression" name="filenameTo" optional="true" type="rstring">
          <description>The to filename for rename - must be non empty for rename command</description>
          <portScope>0</portScope>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="connectionCloseMode" optional="true" type="enum{never, ever, punct}">
          <description>
This optionally parameter controls when the closing of connection after transfer. The parameter takes one value of type [ConnectionCloseMode]. Default value is `never`.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="Expression" name="connectionTimeout" optional="true" type="int32">
          <description>This is the maximum time in seconds that you allow the connection to the server to take. This only limits the connection phase, once it has connected, this option is of no more use. Set to zero to switch to the default built-in connection timeout - 120 seconds. See also the `transferTimeout` parameter.</description>
          <portScope>0</portScope>
        </parameter>
        <parameter cardinality="1" expressionMode="Expression" name="transferTimeout" optional="true" type="int32">
          <description>This is the maximum time in seconds that you allow the libcurl transfer operation to take. Normally, name lookups can take a considerable time. Default timeout is 0 (zero) which means it never times out.</description>
          <portScope>0</portScope>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="curlVerbose" optional="true" type="boolean">
          <description>Verbose mode for curl lib default is false. The curl information are sent stderr.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="Constant" name="sendStatisticsOnError" optional="true" type="boolean">
          <description>If set to true, the operator sends out a statistics tuple on port 0 when the operation fails. Default value is true.</description>
        </parameter>
        <inputPort maxNumPorts="1" minNumPorts="1" optional="false" windowPunctInputMode="Oblivious">
          <description>This input port triggers a ftp command execution. Typically the requested command and parameters are received from stream attributes.</description>
          <windowPolicy>NonWindowed</windowPolicy>
        </inputPort>
        <inputPort maxNumPorts="1" minNumPorts="1" optional="true" windowPunctInputMode="Oblivious">
          <description>This optional input port may be used to set/change the username and password.</description>
          <windowPolicy>NonWindowed</windowPolicy>
        </inputPort>
        <outputPort expressionMode="Expression" maxNumPorts="1" minNumPorts="1" optional="false" windowPunctOutputMode="Free">
          <description>This mandatory port delivers command results and additional statistics information. The GetData output functions must be applied to this port.</description>
        </outputPort>
        <outputPort expressionMode="Expression" maxNumPorts="1" minNumPorts="1" optional="true" windowPunctOutputMode="Free">
          <description>This optional port may be used to carry error information and diagnostics. The GetError output functions may be applied to this port. If no output assignment is applied, the output stream must have a single attribute of type rstring.</description>
        </outputPort>
        <codeTemplate name="FTPCommand-Remove" template="&#xA;stream&lt;rstring fileName, boolean success> ${ResultStream} as OUT = FTPCommand(${CommandStream} as IN) {&#xA;&#x9;param&#xA;&#x9;&#x9;protocol : ftp;&#xA;&#x9;&#x9;host : IN.host;&#xA;&#x9;&#x9;path : IN.path + &quot;/&quot;;&#xA;&#x9;&#x9;filename : IN.fileName;&#xA;&#x9;&#x9;command : &quot;del&quot;;&#xA;&#x9;&#x9;username : &quot;${username}&quot;;&#xA;&#x9;&#x9;password : &quot;${password}&quot;;&#xA;&#x9;output OUT :&#xA;&#x9;&#x9;success = Success();&#xA;}">
          <description>FTPCommand used to remove file</description>
        </codeTemplate>
      </primitiveOp>
      <primitiveOp language="Cpp" modelUriIndex="61" name="FTPPutFile" public="true">
        <description docHref="doc/${nl}/spldoc/html/tk$com.ibm.streamsx.inet/op$com.ibm.streamsx.inet.ftp$FTPPutFile.html">
The `FTPPutFile` operator can put a local file on a remote host by using FTP, FTPS, or SFTP protocols.
You can optionally rename the file after you complete the transfer.

The FTPPutFile operator must not be used inside a consistent region!</description>
        <images>
          <image size="16" uriIndex="62"/>
          <image size="32" uriIndex="63"/>
        </images>
        <outputFunctions name="GetStatistics">
          <function name="Success" returnType="boolean">
            <description>Get the command success indication.</description>
            <prototype>boolean Success()</prototype>
          </function>
          <function name="Url" returnType="rstring">
            <description>This function returns a string with the url including schema of the transferred file.</description>
            <prototype>rstring Url()</prototype>
          </function>
          <function name="FileSize" returnType="uint64">
            <description>This function returns the file size.</description>
            <prototype>uint64 FileSize()</prototype>
          </function>
          <function name="NoTransfers" returnType="uint32">
            <description>Deprecated: This function returns the number of completed ftp transfers. Use function TransferCount() instead.</description>
            <prototype>uint32 NoTransfers()</prototype>
          </function>
          <function name="TransferCount" returnType="uint32">
            <description>This function returns the number of completed ftp transfers.</description>
            <prototype>uint32 TransferCount()</prototype>
          </function>
          <function name="NoTransferFailures" returnType="uint32">
            <description>Deprecated: This function returns the number of failed ftp transfers. Use function TransferFailureCount() instead.</description>
            <prototype>uint32 NoTransferFailures()</prototype>
          </function>
          <function name="TransferFailureCount" returnType="uint32">
            <description>This function returns the number of failed ftp transfers.</description>
            <prototype>uint32 TransferFailureCount()</prototype>
          </function>
          <function name="NoBytesTransferred" returnType="uint64">
            <description>Deprecated: This function returns the number of bytes transferred in successfully completed transfers. Use function BytesTransferred() instead.</description>
            <prototype>uint64 NoBytesTransferred()</prototype>
          </function>
          <function name="BytesTransferred" returnType="uint64">
            <description>This function returns the number of bytes transferred in successfully completed transfers.</description>
            <prototype>uint64 BytesTransferred()</prototype>
          </function>
          <function name="TransferSpeed" returnType="float64">
            <description>This function returns the transfer speed in byte per second of the last transfer / valid after file end.</description>
            <prototype>float64 TransferSpeed()</prototype>
          </function>
          <function name="AsIs" returnType="T">
            <description>Return the argument unchanged.</description>
            <prototype>&lt;any T&gt; T AsIs(T)</prototype>
            <parameter name="__p1" type="T"/>
          </function>
        </outputFunctions>
        <outputFunctions name="GetError">
          <function name="Error" returnType="int32">
            <description>Deprecated: Get the error number. Use function ErrorCode() instead.</description>
            <prototype>int32 Error()</prototype>
          </function>
          <function name="ErrorCode" returnType="int32">
            <description>Get the error number</description>
            <prototype>int32 ErrorCode()</prototype>
          </function>
          <function name="ErrorText" returnType="rstring">
            <description>Get the error description</description>
            <prototype>rstring ErrorText()</prototype>
          </function>
          <function name="Url" returnType="rstring">
            <description>This function returns a string with the url including schema of the transferred file.</description>
            <prototype>rstring Url()</prototype>
          </function>
          <function name="NoTransfers" returnType="uint32">
            <description>Deprecated: This function returns the number of completed ftp transfers. Use function TransferCount() instead.</description>
            <prototype>uint32 NoTransfers()</prototype>
          </function>
          <function name="TransferCount" returnType="uint32">
            <description>This function returns the number of completed ftp transfers.</description>
            <prototype>uint32 TransferCount()</prototype>
          </function>
          <function name="NoTransferFailures" returnType="uint32">
            <description>Deprecated: This function returns the number of failed ftp transfers. Use function TransferFailureCount() instead.</description>
            <prototype>uint32 NoTransferFailures()</prototype>
          </function>
          <function name="TransferFailureCount" returnType="uint32">
            <description>This function returns the number of failed ftp transfers.</description>
            <prototype>uint32 TransferFailureCount()</prototype>
          </function>
          <function name="NoBytesTransferred" returnType="uint64">
            <description>Deprecated: This function returns the number of bytes transferred in successfully completed transfers. Use function BytesTransferred() instead.</description>
            <prototype>uint64 NoBytesTransferred()</prototype>
          </function>
          <function name="BytesTransferred" returnType="uint64">
            <description>This function returns the number of bytes transferred in successfully completed transfers.</description>
            <prototype>uint64 BytesTransferred()</prototype>
          </function>
          <function name="AsIs" returnType="T">
            <description>Return the argument unchanged.</description>
            <prototype>&lt;any T&gt; T AsIs(T)</prototype>
            <parameter name="__p1" type="T"/>
          </function>
        </outputFunctions>
        <parameter cardinality="1" expressionMode="AttributeFree" name="protocol" optional="false" type="enum{ftp,ftpSSLAll,ftpSSLControl,ftpSSLTry,ftps,sftp}">
          <description>Protocol and encryption properties of the connection. This parameter takes one value of type [Protocol]</description>
        </parameter>
        <parameter cardinality="1" expressionMode="Expression" name="host" optional="false" type="rstring">
          <description>Hostname or IP address of the remote host in form hostname\[:port\].</description>
          <portScope>0</portScope>
        </parameter>
        <parameter cardinality="1" expressionMode="Expression" name="path" optional="false" type="rstring">
          <description>
The path of the remote fie/directory. The path may contain an filename part. If the filename part is omitted the parameter must end with a '/'.
In case of ftp protocols the path is relative to the home directory of the user and may depend on the server configuration. In case of ftp protocol an absolute path must start with '//'.
In case of sftp the path is an absolute path. A path relative to users home directory may be entered in the form '~/'.
        </description>
          <portScope>0</portScope>
        </parameter>
        <parameter cardinality="1" expressionMode="Expression" name="filename" optional="true" type="rstring">
          <description>The filename part of the file/directory if the hostPath does not contain a filename part.</description>
          <portScope>0</portScope>
        </parameter>
        <parameter cardinality="1" expressionMode="Expression" name="renameTo" optional="true" type="rstring">
          <description>The rename-to name. A file is renamed if this parameter is there and is non empty.</description>
          <portScope>0</portScope>
        </parameter>
        <parameter cardinality="1" expressionMode="Expression" name="localFilename" optional="false" type="rstring">
          <description>The name of the file to be transferred in the local file system.  If relative, the path is relative to the data directory.</description>
          <portScope>0</portScope>
        </parameter>
        <parameter cardinality="1" expressionMode="Expression" name="username" optional="false" type="rstring">
          <description>The ftp username. If the operator has two input ports and this parameter is an attribute parameter it must be supplied from the second input port.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="Expression" name="password" optional="true" type="rstring">
          <description>The password for the ftp user. If the operator has two input ports and this parameter is an attribute parameter it must be supplied from the second input port.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="connectionCloseMode" optional="true" type="enum{never, ever, punct}">
          <description>
This optionally parameter controls when the closing of connection after transfer. The parameter takes one value of type [ConnectionCloseMode]. Default value is `never`.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="Expression" name="connectionTimeout" optional="true" type="int32">
          <description>This is the maximum time in seconds that you allow the connection to the server to take. This only limits the connection phase, once it has connected, this option is of no more use. Set to zero to switch to the default built-in connection timeout - 120 seconds. See also the `transferTimeout` parameter.</description>
          <portScope>0</portScope>
        </parameter>
        <parameter cardinality="1" expressionMode="Expression" name="transferTimeout" optional="true" type="int32">
          <description>This is the maximum time in seconds that you allow the libcurl transfer operation to take. Normally, name lookups can take a considerable time
and limiting operations to less than a few minutes risk aborting perfectly normal operations. Default timeout is 0 (zero) which means it never times out.</description>
          <portScope>0</portScope>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="curlVerbose" optional="true" type="boolean">
          <description>Verbose mode for curl lib. Default value is false. The curl information are sent stderr.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="useEPSV" optional="true" type="boolean">
          <description>
If the value is true, it tells curl to use the EPSV command when doing passive FTP downloads (default true)
Using EPSV means that it will first attempt to use EPSV before using PASV, but if you pass false to this option,
it will not try using EPSV, only plain PASV
If the server is an IPv6 host, this option will have no effect.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="useEPRT" optional="true" type="boolean">
          <description>
If the value is true, it tells curl to use the EPRT (and LPRT) command when doing active FTP downloads
(which is enabled by ftpPORT) default true. Using EPRT means that it will first attempt to use EPRT and then LPRT before using PORT,
but if you pass false to this option, it will not try using EPRT or LPRT, only plain PORT.
If the server is an IPv6 host, this option will have no effect as of 7.12.3.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="Expression" name="usePORT" optional="true" type="rstring">
          <description>
It will be used to get the IP address to use for the FTP PORT instruction.
The PORT instruction tells the remote server to connect to our specified IP address.
The string may be a plain IP address, a host name, a network interface name or just a '-' symbol to let the
library use your system's default IP address.
Default FTP operations are passive, and thus won't use PORT.
The address can be followed by a ':' to specify a port, optionally followed by a '-' to specify a port range.
If the port specified is 0, the operating system will pick a free port. If a range is provided and all ports
in the range are not available, libcurl will report CURLE_FTP_PORT_FAILED for the handle. Invalid port/range
settings are ignored. IPv6 addresses followed by a port or portrange have to be in brackets.
IPv6 addresses without port/range specifier can be in brackets. (added in 7.19.5)

Examples with specified ports:

eth0:0   192.168.1.2:32000-33000   curl.se:32123   \[::1\]:1234-4567

You disable PORT again and go back to using the passive version by setting this option to an empty string.</description>
          <portScope>0</portScope>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="skipPASVIp" optional="true" type="boolean">
          <description>
If set to true, it instructs libcurl to not use the IP address the server suggests in its 227-response
to libcurl's PASV command when libcurl connects the data connection. Instead libcurl will re-use the same IP address
it already uses for the control connection. But it will use the port number from the 227-response.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="Constant" name="sendStatisticsOnError" optional="true" type="boolean">
          <description>If set to true, the operator sends out a statistics tuple on port 0 when the put-operation fails.</description>
        </parameter>
        <inputPort maxNumPorts="1" minNumPorts="1" optional="false" windowPunctInputMode="Oblivious">
          <description>This input port triggers a file transfer. Typically the requested filenames are received from stream attributes.</description>
          <windowPolicy>NonWindowed</windowPolicy>
        </inputPort>
        <inputPort maxNumPorts="1" minNumPorts="1" optional="true" windowPunctInputMode="Oblivious">
          <description>This optional input port may be used to set/change the username and password.</description>
          <windowPolicy>NonWindowed</windowPolicy>
        </inputPort>
        <outputPort expressionMode="Expression" maxNumPorts="1" minNumPorts="1" optional="false" windowPunctOutputMode="Preserving">
          <description>The statistics stream with the statistics of the performed operation. The GetStatistics output functions must be applied to this port.</description>
        </outputPort>
        <outputPort expressionMode="Expression" maxNumPorts="1" minNumPorts="1" optional="true" windowPunctOutputMode="Free">
          <description>The optional error stream with the diagnostics information. The GetError output functions may be applied to this port. If no output assignment is applied, the output stream must have a single attribute of type rstring.</description>
        </outputPort>
        <codeTemplate name="FTPPutFile" template="&#xA;stream&lt;rstring path, rstring file, uint64 size, rstring url, boolean success> ${ResultStream} as OUT = FTPPutFile(${FilenameStream}) {&#xA;&#x9;param&#xA;&#x9;&#x9;protocol : ftp;&#xA;&#x9;&#x9;host : &quot;${host}&quot;;&#xA;&#x9;&#x9;path : &quot;/${path}/&quot;;&#xA;&#x9;&#x9;username : &quot;${username}&quot;;&#xA;&#x9;&#x9;password : &quot;${password}&quot;;&#xA;&#x9;&#x9;localFilename : path;&#xA;&#x9;&#x9;filename : &quot;file.tmp&quot;;&#xA;&#x9;&#x9;renameTo : file;&#xA;&#x9;&#x9;sendStatisticsOnError : true;&#xA;&#x9;output OUT :&#xA;&#x9;&#x9;size = FileSize(),&#xA;&#x9;&#x9;url = Url(),&#xA;&#x9;&#x9;success = Success();&#xA;}">
          <description>FTPPutFile used to put files to an FTP site using a temporary file name and re-name after transfer. The input stream must have attributes file and path.</description>
        </codeTemplate>
      </primitiveOp>
      <primitiveOp language="Cpp" modelUriIndex="64" name="FTPReader" public="true">
        <description docHref="doc/${nl}/spldoc/html/tk$com.ibm.streamsx.inet/op$com.ibm.streamsx.inet.ftp$FTPReader.html">
The `FTPReader` operator is a source operator that can scan a directory at a remote host
or receive files from a remote host by using the FTP, FTPS, or SFTP protocols.
If the operator works as a directory scanner, the contents of the directory can be received line by line.
Separate output functions are available to get dedicated information about the directory in specialized output functions like
file name, size, or date.

If the operator works as file source, the content of the file can be delivered either in binary format as a `blob` or in text format line by line.

The FTPReader operator must not be used inside a consistent region!
      </description>
        <images>
          <image size="16" uriIndex="65"/>
          <image size="32" uriIndex="66"/>
        </images>
        <outputFunctions name="GetData">
          <function name="Binary" returnType="blob">
            <description>
Get the data as binary blob.
This function must not be used if the operator works as directory scanner (isDirReader : true).
This function must not be used, if one of the following output functions is used:
* Line()
* FileName()
* FileSize()
* FileDate()
* FileUser()
* FileGroup()
* FileInfo()
* IsFile()

One file may be transmitted in several blobs. The blob size is determined by the underlying library. An empty blob indicates an empty file.</description>
            <prototype>blob Binary()</prototype>
          </function>
          <function name="Line" returnType="rstring">
            <description>
Get the data of the directory/file line by line. This requires that the received file is a text file. The line is delivered with the trailing newline
character. An complete empty line indicates an empty file. This function must not be used if the function `Binary()` is used.
            </description>
            <prototype>rstring Line()</prototype>
          </function>
          <function name="Url" returnType="rstring">
            <description>This function returns a string with the url including schema of the received file or scanned directory.</description>
            <prototype>rstring Url()</prototype>
          </function>
          <function name="FileName" returnType="rstring">
            <description>This function returns one file name of the scanned directory. If this function is used, the parameter `isDirReader` must be true.</description>
            <prototype>rstring FileName()</prototype>
          </function>
          <function name="FileSize" returnType="uint64">
            <description>This function returns the file size of one file in the scanned directory. If this function is used, the parameter `isDirReader` must be true.</description>
            <prototype>uint64 FileSize()</prototype>
          </function>
          <function name="FileDate" returnType="rstring">
            <description>This function returns the file date string of one file in the scanned directory. If this function is used, the parameter `isDirReader` must be true.</description>
            <prototype>rstring FileDate()</prototype>
          </function>
          <function name="FileUser" returnType="rstring">
            <description>This function returns the file user of one file in the scanned directory. If this function is used, the parameter `isDirReader` must be true.</description>
            <prototype>rstring FileUser()</prototype>
          </function>
          <function name="FileGroup" returnType="rstring">
            <description>This function returns the file group of one file in the scanned directory. If this function is used, the parameter `isDirReader` must be true.</description>
            <prototype>rstring FileGroup()</prototype>
          </function>
          <function name="FileInfo" returnType="rstring">
            <description>This function returns the file access rights of one file in the scanned directory. If this function is used, the parameter `isDirReader` must be true.</description>
            <prototype>rstring FileInfo()</prototype>
          </function>
          <function name="IsFile" returnType="boolean">
            <description>This function returns true if this directory entry is file a regular file (first character in file info equals '-'). If this function is used, the parameter `isDirReader` must be true.</description>
            <prototype>boolean IsFile()</prototype>
          </function>
          <function name="Sequence" returnType="int32">
            <description>This function returns a sequence number of the output tuple. The sequence starts with 0 for each file/directory.</description>
            <prototype>int32 Sequence()</prototype>
          </function>
          <function name="NoTransfers" returnType="uint32">
            <description>Deprecated: This function returns the number of completed ftp transfers. Use function TransferCount() instead.</description>
            <prototype>uint32 NoTransfers()</prototype>
          </function>
          <function name="TransferCount" returnType="uint32">
            <description>This function returns the number of completed ftp transfers.</description>
            <prototype>uint32 TransferCount()</prototype>
          </function>
          <function name="NoTransferFailures" returnType="uint32">
            <description>Deprecated: This function returns the number of failed ftp transfers. Use function TransferFailureCount() instead.</description>
            <prototype>uint32 NoTransferFailures()</prototype>
          </function>
          <function name="TransferFailureCount" returnType="uint32">
            <description>This function returns the number of failed ftp transfers.</description>
            <prototype>uint32 TransferFailureCount()</prototype>
          </function>
          <function name="NoBytesTransferred" returnType="uint64">
            <description>Deprecated: This function returns the number of bytes transferred in successfully completed transfers. Use function BytesTransferred() instead.</description>
            <prototype>uint64 NoBytesTransferred()</prototype>
          </function>
          <function name="BytesTransferred" returnType="uint64">
            <description>This function returns the number of bytes transferred in successfully completed transfers.</description>
            <prototype>uint64 BytesTransferred()</prototype>
          </function>
          <function name="TransferSpeed" returnType="float64">
            <description>This function returns the transfer speed in byte per second of the last transfer / valid after file end.</description>
            <prototype>float64 TransferSpeed()</prototype>
          </function>
          <function name="AsIs" returnType="T">
            <description>Return the argument unchanged.</description>
            <prototype>&lt;any T&gt; T AsIs(T)</prototype>
            <parameter name="__p1" type="T"/>
          </function>
        </outputFunctions>
        <outputFunctions name="GetError">
          <function name="Error" returnType="int32">
            <description>Deprecated: Get the error number. Use function ErrorCode() instead.</description>
            <prototype>int32 Error()</prototype>
          </function>
          <function name="ErrorCode" returnType="int32">
            <description>Get the error number</description>
            <prototype>int32 ErrorCode()</prototype>
          </function>
          <function name="ErrorText" returnType="rstring">
            <description>Get the error description</description>
            <prototype>rstring ErrorText()</prototype>
          </function>
          <function name="Url" returnType="rstring">
            <description>This function returns a string with the url including schema of the received file or scanned directory.</description>
            <prototype>rstring Url()</prototype>
          </function>
          <function name="NoTransfers" returnType="uint32">
            <description>Deprecated: This function returns the number of completed ftp transfers. Use function TransferCount() instead.</description>
            <prototype>uint32 NoTransfers()</prototype>
          </function>
          <function name="TransferCount" returnType="uint32">
            <description>This function returns the number of completed ftp transfers.</description>
            <prototype>uint32 TransferCount()</prototype>
          </function>
          <function name="NoTransferFailures" returnType="uint32">
            <description>Deprecated: This function returns the number of failed ftp transfers. Use function TransferFailureCount() instead.</description>
            <prototype>uint32 NoTransferFailures()</prototype>
          </function>
          <function name="TransferFailureCount" returnType="uint32">
            <description>This function returns the number of failed ftp transfers.</description>
            <prototype>uint32 TransferFailureCount()</prototype>
          </function>
          <function name="NoBytesTransferred" returnType="uint64">
            <description>Deprecated: This function returns the number of bytes transferred in successfully completed transfers. Use function BytesTransferred() instead.</description>
            <prototype>uint64 NoBytesTransferred()</prototype>
          </function>
          <function name="BytesTransferred" returnType="uint64">
            <description>This function returns the number of bytes transferred in successfully completed transfers.</description>
            <prototype>uint64 BytesTransferred()</prototype>
          </function>
          <function name="AsIs" returnType="T">
            <description>Return the argument unchanged.</description>
            <prototype>&lt;any T&gt; T AsIs(T)</prototype>
            <parameter name="__p1" type="T"/>
          </function>
        </outputFunctions>
        <parameter cardinality="1" expressionMode="AttributeFree" name="protocol" optional="false" type="enum{ftp,ftpSSLAll,ftpSSLControl,ftpSSLTry,ftps,sftp}">
          <description>Protocol and encryption properties of the connection. This parameter takes one value of type [Protocol]</description>
        </parameter>
        <parameter cardinality="1" expressionMode="Constant" name="isDirReader" optional="true" type="boolean">
          <description>
If this parameter is true, the operator acts as directory scanner and each directory entry produces one line at the output.
Special output functions to get the properties of the directory entry are available in this case. Default is `false`</description>
        </parameter>
        <parameter cardinality="1" expressionMode="Expression" name="host" optional="false" type="rstring">
          <description>Hostname or IP address of the remote host in form hostname\[:port\].</description>
          <portScope>0</portScope>
        </parameter>
        <parameter cardinality="1" expressionMode="Expression" name="path" optional="false" type="rstring">
          <description>
The path of the remote fie/directory. The path may contain an filename part. If the filename part is omitted the parameter must end with a '/'.
The path should begin with '/'. In case of ftp protocols the path is relative to the home directory of the user and may depend on the server configuration. In case of ftp protocol an absolute path must start with '//'.
In case of sftp the path is an absolute path. A path relative to users home directory may be entered in the form '~/'.
        </description>
          <portScope>0</portScope>
        </parameter>
        <parameter cardinality="1" expressionMode="Expression" name="filename" optional="true" type="rstring">
          <description>The filename part of the file/directory if the path does not contain a filename part.</description>
          <portScope>0</portScope>
        </parameter>
        <parameter cardinality="1" expressionMode="Expression" name="username" optional="false" type="rstring">
          <description>The ftp username. If the operator has two input ports and this parameter is an attribute parameter it must be supplied from the second input port.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="Expression" name="password" optional="true" type="rstring">
          <description>The password for the ftp user. If the operator has two input ports and this parameter is an attribute parameter it must be supplied from the second input port.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="connectionCloseMode" optional="true" type="enum{never,ever,punct}">
          <description>
This optionally parameter controls when the closing of connection after transfer. The parameter takes one value of type [ConnectionCloseMode]. Default value is `never`.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="Expression" name="connectionTimeout" optional="true" type="int32">
          <description>This is the maximum time in seconds that you allow the connection to the server to take. This only limits the connection phase, once it has connected, this option is of no more use. Set to zero to switch to the default built-in connection timeout - 120 seconds. See also the `transferTimeout` parameter.</description>
          <portScope>0</portScope>
        </parameter>
        <parameter cardinality="1" expressionMode="Expression" name="transferTimeout" optional="true" type="int32">
          <description>This is the maximum time in seconds that you allow the libcurl transfer operation to take. Normally, name lookups can take a considerable time
and limiting operations to less than a few minutes risk aborting perfectly normal operations. Default timeout is 0 (zero) which means it never times out.</description>
          <portScope>0</portScope>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="curlVerbose" optional="true" type="boolean">
          <description>Verbose mode for curl lib. Default value is false. The curl information are sent stderr.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="useEPSV" optional="true" type="boolean">
          <description>
If the value is true, it tells curl to use the EPSV command when doing passive FTP downloads (default true)
Using EPSV means that it will first attempt to use EPSV before using PASV, but if you pass false to this option,
it will not try using EPSV, only plain PASV
If the server is an IPv6 host, this option will have no effect.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="useEPRT" optional="true" type="boolean">
          <description>
If the value is true, it tells curl to use the EPRT (and LPRT) command when doing active FTP downloads
(which is enabled by ftpPORT) default true. Using EPRT means that it will first attempt to use EPRT and then LPRT before using PORT,
but if you pass false to this option, it will not try using EPRT or LPRT, only plain PORT.
If the server is an IPv6 host, this option will have no effect as of 7.12.3.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="Expression" name="usePORT" optional="true" type="rstring">
          <description>
It will be used to get the IP address to use for the FTP PORT instruction.
The PORT instruction tells the remote server to connect to our specified IP address.
The string may be a plain IP address, a host name, a network interface name or just a '-' symbol to let the
library use your system's default IP address.
Default FTP operations are passive, and thus won't use PORT.
The address can be followed by a ':' to specify a port, optionally followed by a '-' to specify a port range.
If the port specified is 0, the operating system will pick a free port. If a range is provided and all ports
in the range are not available, libcurl will report CURLE_FTP_PORT_FAILED for the handle. Invalid port/range
settings are ignored. IPv6 addresses followed by a port or portrange have to be in brackets.
IPv6 addresses without port/range specifier can be in brackets. (added in 7.19.5)

Examples with specified ports:

eth0:0   192.168.1.2:32000-33000   curl.se:32123   \[::1\]:1234-4567

You disable PORT again and go back to using the passive version by setting this option to an empty string.</description>
          <portScope>0</portScope>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="skipPASVIp" optional="true" type="boolean">
          <description>
If set to true, it instructs libcurl to not use the IP address the server suggests in its 227-response
to libcurl's PASV command when libcurl connects the data connection. Instead libcurl will re-use the same IP address
it already uses for the control connection. But it will use the port number from the 227-response.</description>
        </parameter>
        <inputPort maxNumPorts="1" minNumPorts="1" optional="false" windowPunctInputMode="Oblivious">
          <description>This input port triggers a file transfer / directory scan. Typically the requested filename/directory is received from a stream attribute.</description>
          <windowPolicy>NonWindowed</windowPolicy>
        </inputPort>
        <inputPort maxNumPorts="1" minNumPorts="1" optional="true" windowPunctInputMode="Oblivious">
          <description>This optional input port may be used to set/change the username and password.</description>
          <windowPolicy>NonWindowed</windowPolicy>
        </inputPort>
        <outputPort expressionMode="Expression" maxNumPorts="1" minNumPorts="1" optional="false" windowPunctOutputMode="Generating">
          <description>This mandatory port emits the file/directory content. The GetData output functions must be applied to this port.</description>
        </outputPort>
        <outputPort expressionMode="Expression" maxNumPorts="1" minNumPorts="1" optional="true" windowPunctOutputMode="Free">
          <description>This optional port may be used to carry error information and diagnostics. The GetError output functions may be applied to this port. If no output assignment is applied, the output stream must have a single attribute of type rstring.</description>
        </outputPort>
        <codeTemplate name="FTPReader-DirectoryScanner" template="&#xA;stream&lt;rstring fileName, uint64 size, rstring date, rstring user, boolean isFile> ${FilenameStream} as OUT = FTPReader(${TriggerStream}) {&#xA;&#x9;param&#xA;&#x9;&#x9;protocol : ftp;&#xA;&#x9;&#x9;isDirReader : true;&#xA;&#x9;&#x9;host : &quot;${host}&quot;;&#xA;&#x9;&#x9;path : &quot;${path}/&quot;;&#xA;&#x9;&#x9;username : &quot;${username}&quot;;&#xA;&#x9;&#x9;password : &quot;${password}&quot;;&#xA;&#x9;output OUT :&#xA;&#x9;&#x9;fileName = FileName(),&#xA;&#x9;&#x9;size = FileSize(),&#xA;&#x9;&#x9;date = FileDate(),&#xA;&#x9;&#x9;user = FileUser(),&#xA;&#x9;&#x9;isFile = IsFile();&#xA;}">
          <description>FTPReader as remote directory scanner</description>
        </codeTemplate>
        <codeTemplate name="FTPReader-TextFileReader" template="&#xA;stream&lt;rstring line, int32 sequence> ${FileStream} as OUT = FTPReader(${FilenameStream} as IN) {&#xA;&#x9;param&#xA;&#x9;&#x9;protocol : ftp;&#xA;&#x9;&#x9;isDirReader : false;&#xA;&#x9;&#x9;host : &quot;${host}&quot;;&#xA;&#x9;&#x9;path : &quot;/${path}/&quot;;&#xA;&#x9;&#x9;filename : IN.fileName;&#xA;&#x9;&#x9;username : &quot;${username}&quot;;&#xA;&#x9;&#x9;password : &quot;${password}&quot;;&#xA;&#x9;output OUT :&#xA;&#x9;&#x9;line = Line(),&#xA;&#x9;&#x9;sequence = Sequence();&#xA;}">
          <description>FTPReader used to receive a text file</description>
        </codeTemplate>
        <codeTemplate name="FTPReader-BinaryFileReader" template="&#xA;stream&lt;blob content, int32 sequence> ${FileStream} as OUT = FTPReader(${FilenameStream} as IN; ${PasswordStream} as PWD) {&#xA;&#x9;param&#xA;&#x9;&#x9;protocol : ftp;&#xA;&#x9;&#x9;host : &quot;${host}&quot;;&#xA;&#x9;&#x9;path : &quot;/${path}/&quot;;&#xA;&#x9;&#x9;filename : IN.fileName;&#xA;&#x9;&#x9;username : &quot;${username}&quot;;&#xA;&#x9;&#x9;password : PWD.password;&#xA;&#x9;output OUT :&#xA;&#x9;&#x9;content = Binary(),&#xA;&#x9;&#x9;sequence = Sequence();&#xA;}">
          <description>FTPReader used to receive a binary file and uses a password stream</description>
        </codeTemplate>
      </primitiveOp>
      <type column="6" line="16" name="Protocol" static="true" type="enum { ftp, ftpSSLAll, ftpSSLControl, ftpSSLTry, ftps, sftp }" uriIndex="1"/>
      <type column="6" line="32" name="ConnectionCloseMode" static="true" type="enum { never, ever, punct }" uriIndex="1"/>
      <enumLiterals column="2" line="17" typeName="Protocol" uriIndex="1">
        <enum>ftp</enum>
        <enum>ftpSSLAll</enum>
        <enum>ftpSSLControl</enum>
        <enum>ftpSSLTry</enum>
        <enum>ftps</enum>
        <enum>sftp</enum>
      </enumLiterals>
      <enumLiterals column="2" line="33" typeName="ConnectionCloseMode" uriIndex="1">
        <enum>never</enum>
        <enum>ever</enum>
        <enum>punct</enum>
      </enumLiterals>
    </namespace>
    <sabFiles>
      <ti:include path="toolkit.xml" root="toolkitDir"/>
      <ti:include path="impl/java/lib/**" root="toolkitDir"/>
      <ti:include path="impl/java/bin/**" root="toolkitDir"/>
      <ti:include path="impl/bin/**" root="toolkitDir"/>
      <ti:include path="impl/lib/**" root="toolkitDir"/>
      <ti:include path="impl/nl/*.dat" root="toolkitDir"/>
      <ti:include path="etc/**" root="toolkitDir"/>
      <ti:include path="lib/**" root="toolkitDir"/>
      <ti:include path="nl/**" root="toolkitDir"/>
      <ti:include path="opt/**" root="toolkitDir"/>
    </sabFiles>
  </toolkit>

</toolkitModel>


package FTPReader_h;
use strict; use Cwd 'realpath';  use File::Basename;  use lib dirname(__FILE__);  use SPL::Operator::Instance::OperatorInstance; use SPL::Operator::Instance::Annotation; use SPL::Operator::Instance::Context; use SPL::Operator::Instance::Expression; use SPL::Operator::Instance::ExpressionTree; use SPL::Operator::Instance::ExpressionTreeEvaluator; use SPL::Operator::Instance::ExpressionTreeVisitor; use SPL::Operator::Instance::ExpressionTreeCppGenVisitor; use SPL::Operator::Instance::InputAttribute; use SPL::Operator::Instance::InputPort; use SPL::Operator::Instance::OutputAttribute; use SPL::Operator::Instance::OutputPort; use SPL::Operator::Instance::Parameter; use SPL::Operator::Instance::StateVariable; use SPL::Operator::Instance::TupleValue; use SPL::Operator::Instance::Window; 
sub main::generate($$) {
   my ($xml, $signature) = @_;  
   print "// $$signature\n";
   my $model = SPL::Operator::Instance::OperatorInstance->new($$xml);
   unshift @INC, dirname ($model->getContext()->getOperatorDirectory()) . "/../impl/nl/include";
   $SPL::CodeGenHelper::verboseMode = $model->getContext()->isVerboseModeOn();
   print '/* Copyright (C) 2013-2014, International Business Machines Corporation */', "\n";
   print '/* All Rights Reserved */', "\n";
   print "\n";
     my @includes = ("#include <FTPWrapper.h>");
   
     my $hasPasswordStream = $model->getNumberOfInputPorts() == 2;
     my $hasErrorStream = $model->getNumberOfOutputPorts() == 2;
   print "\n";
   print "\n";
   SPL::CodeGen::headerPrologue($model, \@includes);
   print "\n";
   print "\n";
   print 'class MY_OPERATOR : public MY_BASE_OPERATOR ', "\n";
   print '{', "\n";
   print 'public:', "\n";
   print '  // Constructor', "\n";
   print '  MY_OPERATOR();', "\n";
   print "\n";
   print '  // Destructor', "\n";
   print '  virtual ~MY_OPERATOR(); ', "\n";
   print "\n";
   print '  // Notify pending shutdown', "\n";
   print '  void prepareToShutdown(); ', "\n";
   print "\n";
   print '  // Tuple processing for non-mutating ports', "\n";
   print '  void process(Tuple const & tuple, uint32_t port);', "\n";
   print '  // Punct', "\n";
   print '  void process(Punctuation const & punctuation, uint32_t port);', "\n";
   print "\n";
   print 'private:', "\n";
   print '  com::ibm::streamsx::inet::ftp::FTPReaderWrapper * reader;', "\n";
   print '  ', "\n";
   print '  uint32 sequence;', "\n";
   print "\n";
   print '  std::string data;', "\n";
   print '  SPL::Mutex mutex;', "\n";
   print '  bool shutdown;', "\n";
   print "\n";
   print '  //the callback function for the curl lib', "\n";
   print '  static size_t callback(void * buffer, size_t size, size_t count, void * stream);', "\n";
   print '  //calls this member function', "\n";
   print '  size_t writeToStream(void * buffer, size_t size, size_t count);', "\n";
   print '  //the function to send out data step by step', "\n";
   print '  void sendIntermediateTuples(IPort0Type const & iport$0); //send out read data tuples to port 0', "\n";
   print '  void sendLeftoverTuple(IPort0Type const & iport$0); //send out read data tuples to port 0', "\n";
   print '  OPort0Type generateOutTuple(char const * cp, size_t size, bool leftover, IPort0Type const & iport$0);', "\n";
   print '  void sendError(SPL::rstring const & reason, IPort0Type const & iport$0); ', "\n";
   print "\n";
   print '  IPort0Type const * inTuple0; //transfer for output assignments', "\n";
   print '  //TODO max blocksize in lib', "\n";
   print '  //static const uint64_t maxBlobSendSize = 4096;', "\n";
   print '  static SPL::rstring debugAspect;', "\n";
   print '};', "\n";
   print "\n";
   SPL::CodeGen::headerEpilogue($model);
   print "\n";
   print "\n";
   CORE::exit $SPL::CodeGen::USER_ERROR if ($SPL::CodeGen::sawError);
}
1;
